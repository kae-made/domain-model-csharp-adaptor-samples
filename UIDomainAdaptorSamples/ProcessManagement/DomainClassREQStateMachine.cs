// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ProcessManagement
{
    public partial class DomainClassREQStateMachine : StateMachineBase, ITransition
    {
        public enum Events
        {
            REQ1 = 0,     // Request Process
            REQ2 = 1,     // Assigned
            REQ3 = 2    // Done
        }

        public enum States
        {
            _NoState_ = 0,
            WaitingForResourceAssigned = 1,
            Processing = 2,
            Done = 3
        }

        private interface IEventArgsResourceNameStep1CommandStep2CommandStep3CommandDef
        {
            public string ResourceName { get; set; }
            public string Step1Command { get; set; }
            public string Step2Command { get; set; }
            public string Step3Command { get; set; }
        }
        public class REQ1_RequestProcess : EventData, IEventArgsResourceNameStep1CommandStep2CommandStep3CommandDef
        {
            DomainClassREQ reciever;

            public REQ1_RequestProcess(DomainClassREQ reciever) : base((int)Events.REQ1)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public string ResourceName { get; set; }
            public string Step1Command { get; set; }
            public string Step2Command { get; set; }
            public string Step3Command { get; set; }
            public static REQ1_RequestProcess Create(DomainClassREQ receiver, string ResourceName, string Step1Command, string Step2Command, string Step3Command, bool sendNow, InstanceRepository instanceRepository, Logger logger)
            {
                var newEvent = new REQ1_RequestProcess(receiver) { ResourceName = ResourceName, Step1Command = Step1Command, Step2Command = Step2Command, Step3Command = Step3Command };
                if (receiver == null && instanceRepository != null)
                {
                    receiver = DomainClassREQBase.CreateInstance(instanceRepository, logger);
                }
                if (sendNow)
                {
                    receiver.TakeEvent(newEvent);
                }

                return newEvent;
            }
        }

        public class REQ2_Assigned : EventData
        {
            DomainClassREQ reciever;

            public REQ2_Assigned(DomainClassREQ reciever) : base((int)Events.REQ2)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static REQ2_Assigned Create(DomainClassREQ receiver, bool sendNow)
            {
                var newEvent = new REQ2_Assigned(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }

                return newEvent;
            }
        }

        public class REQ3_Done : EventData
        {
            DomainClassREQ reciever;

            public REQ3_Done(DomainClassREQ reciever) : base((int)Events.REQ3)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static REQ3_Done Create(DomainClassREQ receiver, bool sendNow)
            {
                var newEvent = new REQ3_Done(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }

                return newEvent;
            }
        }

        protected DomainClassREQ target;

        protected InstanceRepository instanceRepository;

        public DomainClassREQStateMachine(DomainClassREQ target, InstanceRepository instanceRepository, Logger logger) : base(0, logger)
        {
            this.target = target;
            this.stateTransition = this;
            this.logger = logger;
            this.instanceRepository = instanceRepository;
        }

        protected int[,] stateTransitionTable = new int[3, 3]
            {
                { (int)ITransition.Transition.CantHappen, (int)States.Processing, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)States.Done }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen }
            };

        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:REQ(Requester_ID={target.Attr_Requester_ID}):entering[current={CurrentState},event={eventData.EventNumber}");


            changedStates = new List<ChangedState>();

            switch (nextState)
            {
            case (int)States.WaitingForResourceAssigned:
                ActionWaitingForResourceAssigned(((IEventArgsResourceNameStep1CommandStep2CommandStep3CommandDef)eventData).ResourceName, ((IEventArgsResourceNameStep1CommandStep2CommandStep3CommandDef)eventData).Step1Command, ((IEventArgsResourceNameStep1CommandStep2CommandStep3CommandDef)eventData).Step2Command, ((IEventArgsResourceNameStep1CommandStep2CommandStep3CommandDef)eventData).Step3Command);
                break;
            case (int)States.Processing:
                ActionProcessing();
                break;
            case (int)States.Done:
                ActionDone();
                break;
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:REQ(Requester_ID={target.Attr_Requester_ID}):entered[current={CurrentState},event={eventData.EventNumber}");


            instanceRepository.SyncChangedStates(changedStates);
        }
    }
}
