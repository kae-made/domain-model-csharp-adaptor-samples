// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ProcessManagement
{
    public partial class DomainClassOSBase : DomainClassOS
    {
        protected static readonly string className = "OS";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassOSBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null)
        {
            var newInstance = new DomainClassOSBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:OS(Order_ID={newInstance.Attr_Order_ID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassOSBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_Order_ID = Guid.NewGuid().ToString();
        }
        protected string attr_Order_ID;
        protected bool stateof_Order_ID = false;

        protected string attr_Command;
        protected bool stateof_Command = false;

        public string Attr_Order_ID { get { return attr_Order_ID; } set { attr_Order_ID = value; stateof_Order_ID = true; } }
        public string Attr_Command { get { return attr_Command; } set { attr_Command = value; stateof_Command = true; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassOS instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "Order_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Order_ID)
                        {
                            result = false;
                        }
                        break;
                    case "Command":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Command)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }

        public IEnumerable<DomainClassPS> LinkedR4()
        {
            var result = new List<DomainClassPS>();
            var candidates = instanceRepository.GetDomainInstances("PS").Where(inst=>(this.Attr_Order_ID==((DomainClassPS)inst).Attr_Order_ID));
            foreach (var c in candidates)
            {
                result.Add((DomainClassPS)c);
            }
            return result;
        }



        
        public bool Validate()
        {
            bool isValid = true;
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:OS(Order_ID={this.Attr_Order_ID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            attr_Order_ID = (string)propertyValues["Order_ID"];
            stateof_Order_ID = false;
            attr_Command = (string)propertyValues["Command"];
            stateof_Command = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_Order_ID)
            {
                results.Add("Order_ID", attr_Order_ID);
                stateof_Order_ID = false;
            }
            if (stateof_Command)
            {
                results.Add("Command", attr_Command);
                stateof_Command = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"Order_ID={this.Attr_Order_ID}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            results.Add("Order_ID", attr_Order_ID);
            results.Add("Command", attr_Command);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
