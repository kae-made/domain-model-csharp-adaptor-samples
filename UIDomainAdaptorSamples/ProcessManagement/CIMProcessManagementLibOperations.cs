// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;
using System.Reflection;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ProcessManagement
{
    public partial class CIMProcessManagementLib
    {
        public void TestInitialize(string assignerName)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : SELECT ANY resourceAssigner FROM INSTANCES OF RA WHERE SELECTED.Name == param.assignerName;
            //   2 : IF EMPTY resourceAssigner
            //   3 : 	CREATE OBJECT INSTANCE resourceAssigner OF RA;
            //   4 : 	resourceAssigner.Name = param.assignerName;
            //   5 : 
            //   6 : 	CREATE OBJECT INSTANCE resource OF RES;
            //   7 : 	resource.Name = "Res0Of" + param.assignerName;
            //   8 : 	RELATE resource TO resourceAssigner ACROSS R6;
            //   9 : 
            //  10 : 	CREATE OBJECT INSTANCE resource OF RES;
            //  11 : 	resource.Name = "Res1Of" + param.assignerName;
            //  12 : 	RELATE resource TO resourceAssigner ACROSS R6;
            //  13 : 
            //  14 : 	CREATE OBJECT INSTANCE resource OF RES;
            //  15 : 	resource.Name = "Res2Of" + param.assignerName;
            //  16 : 	RELATE resource TO resourceAssigner ACROSS R6;
            //  17 : 
            //  18 : END IF;
            //  19 : 
            //  20 : cmdName = "CmdA";
            //  21 : SELECT ANY orderSpec FROM INSTANCES OF OS WHERE SELECTED.Command == cmdName;
            //  22 : IF EMPTY orderSpec
            //  23 : 	CREATE OBJECT INSTANCE orderSpec OF OS;
            //  24 : 	orderSpec.Command = cmdName;
            //  25 : END IF;
            //  26 : 
            //  27 : cmdName = "CmdB";
            //  28 : SELECT ANY orderSpec FROM INSTANCES OF OS WHERE SELECTED.Command == cmdName;
            //  29 : IF EMPTY orderSpec
            //  30 : 	CREATE OBJECT INSTANCE orderSpec OF OS;
            //  31 : 	orderSpec.Command = cmdName;
            //  32 : END IF;
            //  33 : 
            //  34 : cmdName = "CmdC";
            //  35 : SELECT ANY orderSpec FROM INSTANCES OF OS WHERE SELECTED.Command == cmdName;
            //  36 : IF EMPTY orderSpec
            //  37 : 	CREATE OBJECT INSTANCE orderSpec OF OS;
            //  38 : 	orderSpec.Command = cmdName;
            //  39 : END IF;
            //  40 : 
            //  41 : cmdName = "CmdD";
            //  42 : SELECT ANY orderSpec FROM INSTANCES OF OS WHERE SELECTED.Command == cmdName;
            //  43 : IF EMPTY orderSpec
            //  44 : 	CREATE OBJECT INSTANCE orderSpec OF OS;
            //  45 : 	orderSpec.Command = cmdName;
            //  46 : END IF;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var resourceAssignerTempSet = instanceRepository.GetDomainInstances("RA").Where(selected => ((((DomainClassRA)selected).Attr_Name == assignerName)));
            if (instanceRepository.ExternalStorageAdaptor != null) resourceAssignerTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "RA", resourceAssignerTempSet, () => { return $"(Name = assignerName)"; }, () => { return DomainClassRABase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var resourceAssigner = (DomainClassRA)(resourceAssignerTempSet.FirstOrDefault());

            // Line : 2
            if (resourceAssigner == null)
            {
                // Line : 3
                resourceAssigner = DomainClassRABase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 4
                resourceAssigner.Attr_Name = assignerName;
                // Line : 6
                var resource = DomainClassRESBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 7
                resource.Attr_Name = ("Res0Of" + assignerName);
                // Line : 8
                // resource - R6 -> resourceAssigner;
                resource.LinkR6(resourceAssigner, changedStates);

                // Line : 10
                resource = DomainClassRESBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 11
                resource.Attr_Name = ("Res1Of" + assignerName);
                // Line : 12
                // resource - R6 -> resourceAssigner;
                resource.LinkR6(resourceAssigner, changedStates);

                // Line : 14
                resource = DomainClassRESBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 15
                resource.Attr_Name = ("Res2Of" + assignerName);
                // Line : 16
                // resource - R6 -> resourceAssigner;
                resource.LinkR6(resourceAssigner, changedStates);

            }

            // Line : 20
            var cmdName = "CmdA";
            // Line : 21
            var orderSpecTempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == cmdName)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpecTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpecTempSet, () => { return $"(Command = cmdName)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var orderSpec = (DomainClassOS)(orderSpecTempSet.FirstOrDefault());

            // Line : 22
            if (orderSpec == null)
            {
                // Line : 23
                orderSpec = DomainClassOSBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 24
                orderSpec.Attr_Command = cmdName;
            }

            // Line : 27
            cmdName = "CmdB";
            // Line : 28
            orderSpecTempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == cmdName)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpecTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpecTempSet, () => { return $"(Command = cmdName)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            orderSpec = (DomainClassOS)(orderSpecTempSet.FirstOrDefault());

            // Line : 29
            if (orderSpec == null)
            {
                // Line : 30
                orderSpec = DomainClassOSBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 31
                orderSpec.Attr_Command = cmdName;
            }

            // Line : 34
            cmdName = "CmdC";
            // Line : 35
            orderSpecTempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == cmdName)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpecTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpecTempSet, () => { return $"(Command = cmdName)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            orderSpec = (DomainClassOS)(orderSpecTempSet.FirstOrDefault());

            // Line : 36
            if (orderSpec == null)
            {
                // Line : 37
                orderSpec = DomainClassOSBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 38
                orderSpec.Attr_Command = cmdName;
            }

            // Line : 41
            cmdName = "CmdD";
            // Line : 42
            orderSpecTempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == cmdName)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpecTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpecTempSet, () => { return $"(Command = cmdName)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            orderSpec = (DomainClassOS)(orderSpecTempSet.FirstOrDefault());

            // Line : 43
            if (orderSpec == null)
            {
                // Line : 44
                orderSpec = DomainClassOSBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 45
                orderSpec.Attr_Command = cmdName;
            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void TestCreateRequester(string resourceName, string step1Cmd, string step2Cmd, string step3Cmd)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //  1 : SELECT ANY resource FROM INSTANCES OF RES WHERE SELECTED.Name == param.resourceName;
            //  2 : SELECT ANY orderSpec1 FROM INSTANCES OF OS WHERE SELECTED.Command == param.step1Cmd;
            //  3 : SELECT ANY orderSpec2 FROM INSTANCES OF OS WHERE SELECTED.Command == param.step2Cmd;
            //  4 : SELECT ANY orderSpec3 FROM INSTANCES OF OS WHERE SELECTED.Command == param.step3Cmd;
            //  5 : IF NOT_EMPTY resource AND NOT_EMPTY orderSpec1 AND NOT_EMPTY orderSpec2 AND NOT_EMPTY orderSpec3
            //  6 : 	GENERATE REQ1:'Request Process'( ResourceName:param.resourceName, Step1Command:param.step1Cmd, Step2Command:param.step2Cmd, Step3Command:param.step3Cmd ) TO REQ CREATOR;
            //  7 : END IF;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var resourceTempSet = instanceRepository.GetDomainInstances("RES").Where(selected => ((((DomainClassRES)selected).Attr_Name == resourceName)));
            if (instanceRepository.ExternalStorageAdaptor != null) resourceTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "RES", resourceTempSet, () => { return $"(Name = resourceName)"; }, () => { return DomainClassRESBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var resource = (DomainClassRES)(resourceTempSet.FirstOrDefault());

            // Line : 2
            var orderSpec1TempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == step1Cmd)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpec1TempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpec1TempSet, () => { return $"(Command = step1Cmd)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var orderSpec1 = (DomainClassOS)(orderSpec1TempSet.FirstOrDefault());

            // Line : 3
            var orderSpec2TempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == step2Cmd)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpec2TempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpec2TempSet, () => { return $"(Command = step2Cmd)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var orderSpec2 = (DomainClassOS)(orderSpec2TempSet.FirstOrDefault());

            // Line : 4
            var orderSpec3TempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == step3Cmd)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpec3TempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpec3TempSet, () => { return $"(Command = step3Cmd)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var orderSpec3 = (DomainClassOS)(orderSpec3TempSet.FirstOrDefault());

            // Line : 5
            if ((((resource != null && orderSpec1 != null) && orderSpec2 != null) && orderSpec3 != null))
            {
                // Line : 6
                DomainClassREQStateMachine.REQ1_RequestProcess.Create(receiver:null, ResourceName:resourceName, Step1Command:step1Cmd, Step2Command:step2Cmd, Step3Command:step3Cmd, isSelfEvent:false, sendNow:true, instanceRepository:instanceRepository, logger:logger);

            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void TestNotifyProcessStepDone(string requestorId)
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : SELECT ANY requester FROM INSTANCES OF REQ WHERE SELECTED.Requester_ID == param.requestorId;
            //   2 : IF NOT_EMPTY requester
            //   3 : 	SELECT ONE currentProcStep RELATED BY requester->P[R1]->PS[R7.'current step'];
            //   4 : 	IF NOT_EMPTY currentProcStep
            //   5 : 		IF currentProcStep.Finished == FALSE
            //   6 : 			GENERATE PS2:Done TO currentProcStep;
            //   7 : 		ELSE
            //   8 : 			SELECT ONE currentIWork RELATED BY currentProcStep->IW[R5.'successor'];
            //   9 : 			GENERATE IW2:Done to currentIWork; 
            //  10 : 		END IF;
            //  11 : 	END IF;
            //  12 : END IF;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var requesterTempSet = instanceRepository.GetDomainInstances("REQ").Where(selected => ((((DomainClassREQ)selected).Attr_Requester_ID == requestorId)));
            if (instanceRepository.ExternalStorageAdaptor != null) requesterTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "REQ", requesterTempSet, () => { return $"(Requester_ID = requestorId)"; }, () => { return DomainClassREQBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var requester = (DomainClassREQ)(requesterTempSet.FirstOrDefault());

            // Line : 2
            if (requester != null)
            {
                // Line : 3
                DomainClassPS currentProcStep = null;
                var requesterIn0RL0 = requester.LinkedR1OtherIsUserOf();
                if (requesterIn0RL0 != null)
                {
                    currentProcStep = requesterIn0RL0.LinkedR7CurrentStep();
                }

                // Line : 4
                if (currentProcStep != null)
                {
                    // Line : 5
                    if ((currentProcStep.Attr_Finished == false))
                    {
                        // Line : 6
                        if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
                        {
                            changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = currentProcStep, Event = DomainClassPSStateMachine.PS2_Done.Create(receiver:currentProcStep, false, sendNow:false) });
                        }
                        else
                        {
                            DomainClassPSStateMachine.PS2_Done.Create(receiver:currentProcStep, isSelfEvent:false, sendNow:true);
                        }

                    }
                    else
                    {
                        // Line : 8
                        var currentIWork = currentProcStep.LinkedR5OtherPredecessor();

                        // Line : 9
                        if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
                        {
                            changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = currentIWork, Event = DomainClassIWStateMachine.IW2_Done.Create(receiver:currentIWork, false, sendNow:false) });
                        }
                        else
                        {
                            DomainClassIWStateMachine.IW2_Done.Create(receiver:currentIWork, isSelfEvent:false, sendNow:true);
                        }

                    }

                }

            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void Verify1Initialize()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : assingnerName = "Test";
            //   2 : SELECT ANY resourceAssigner FROM INSTANCES OF RA WHERE SELECTED.Name == assingnerName;
            //   3 : IF EMPTY resourceAssigner
            //   4 : 	CREATE OBJECT INSTANCE resourceAssigner OF RA;
            //   5 : 	resourceAssigner.Name = assingnerName;
            //   6 : 
            //   7 : 	CREATE OBJECT INSTANCE resource OF RES;
            //   8 : 	resource.Name = "Res0Of" + assingnerName;
            //   9 : 	RELATE resource TO resourceAssigner ACROSS R6;
            //  10 : 
            //  11 : 	CREATE OBJECT INSTANCE resource OF RES;
            //  12 : 	resource.Name = "Res1Of" + assingnerName;
            //  13 : 	RELATE resource TO resourceAssigner ACROSS R6;
            //  14 : 
            //  15 : 	CREATE OBJECT INSTANCE resource OF RES;
            //  16 : 	resource.Name = "Res2Of" + assingnerName;
            //  17 : 	RELATE resource TO resourceAssigner ACROSS R6;
            //  18 : 
            //  19 : END IF;
            //  20 : 
            //  21 : cmdName = "CmdA";
            //  22 : SELECT ANY orderSpec FROM INSTANCES OF OS WHERE SELECTED.Command == cmdName;
            //  23 : IF EMPTY orderSpec
            //  24 : 	CREATE OBJECT INSTANCE orderSpec OF OS;
            //  25 : 	orderSpec.Command = cmdName;
            //  26 : END IF;
            //  27 : 
            //  28 : cmdName = "CmdB";
            //  29 : SELECT ANY orderSpec FROM INSTANCES OF OS WHERE SELECTED.Command == cmdName;
            //  30 : IF EMPTY orderSpec
            //  31 : 	CREATE OBJECT INSTANCE orderSpec OF OS;
            //  32 : 	orderSpec.Command = cmdName;
            //  33 : END IF;
            //  34 : 
            //  35 : cmdName = "CmdC";
            //  36 : SELECT ANY orderSpec FROM INSTANCES OF OS WHERE SELECTED.Command == cmdName;
            //  37 : IF EMPTY orderSpec
            //  38 : 	CREATE OBJECT INSTANCE orderSpec OF OS;
            //  39 : 	orderSpec.Command = cmdName;
            //  40 : END IF;
            //  41 : 
            //  42 : cmdName = "CmdD";
            //  43 : SELECT ANY orderSpec FROM INSTANCES OF OS WHERE SELECTED.Command == cmdName;
            //  44 : IF EMPTY orderSpec
            //  45 : 	CREATE OBJECT INSTANCE orderSpec OF OS;
            //  46 : 	orderSpec.Command = cmdName;
            //  47 : END IF;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var assingnerName = "Test";
            // Line : 2
            var resourceAssignerTempSet = instanceRepository.GetDomainInstances("RA").Where(selected => ((((DomainClassRA)selected).Attr_Name == assingnerName)));
            if (instanceRepository.ExternalStorageAdaptor != null) resourceAssignerTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "RA", resourceAssignerTempSet, () => { return $"(Name = assingnerName)"; }, () => { return DomainClassRABase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var resourceAssigner = (DomainClassRA)(resourceAssignerTempSet.FirstOrDefault());

            // Line : 3
            if (resourceAssigner == null)
            {
                // Line : 4
                resourceAssigner = DomainClassRABase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 5
                resourceAssigner.Attr_Name = assingnerName;
                // Line : 7
                var resource = DomainClassRESBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 8
                resource.Attr_Name = ("Res0Of" + assingnerName);
                // Line : 9
                // resource - R6 -> resourceAssigner;
                resource.LinkR6(resourceAssigner, changedStates);

                // Line : 11
                resource = DomainClassRESBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 12
                resource.Attr_Name = ("Res1Of" + assingnerName);
                // Line : 13
                // resource - R6 -> resourceAssigner;
                resource.LinkR6(resourceAssigner, changedStates);

                // Line : 15
                resource = DomainClassRESBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 16
                resource.Attr_Name = ("Res2Of" + assingnerName);
                // Line : 17
                // resource - R6 -> resourceAssigner;
                resource.LinkR6(resourceAssigner, changedStates);

            }

            // Line : 21
            var cmdName = "CmdA";
            // Line : 22
            var orderSpecTempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == cmdName)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpecTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpecTempSet, () => { return $"(Command = cmdName)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var orderSpec = (DomainClassOS)(orderSpecTempSet.FirstOrDefault());

            // Line : 23
            if (orderSpec == null)
            {
                // Line : 24
                orderSpec = DomainClassOSBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 25
                orderSpec.Attr_Command = cmdName;
            }

            // Line : 28
            cmdName = "CmdB";
            // Line : 29
            orderSpecTempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == cmdName)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpecTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpecTempSet, () => { return $"(Command = cmdName)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            orderSpec = (DomainClassOS)(orderSpecTempSet.FirstOrDefault());

            // Line : 30
            if (orderSpec == null)
            {
                // Line : 31
                orderSpec = DomainClassOSBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 32
                orderSpec.Attr_Command = cmdName;
            }

            // Line : 35
            cmdName = "CmdC";
            // Line : 36
            orderSpecTempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == cmdName)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpecTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpecTempSet, () => { return $"(Command = cmdName)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            orderSpec = (DomainClassOS)(orderSpecTempSet.FirstOrDefault());

            // Line : 37
            if (orderSpec == null)
            {
                // Line : 38
                orderSpec = DomainClassOSBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 39
                orderSpec.Attr_Command = cmdName;
            }

            // Line : 42
            cmdName = "CmdD";
            // Line : 43
            orderSpecTempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == cmdName)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpecTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpecTempSet, () => { return $"(Command = cmdName)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            orderSpec = (DomainClassOS)(orderSpecTempSet.FirstOrDefault());

            // Line : 44
            if (orderSpec == null)
            {
                // Line : 45
                orderSpec = DomainClassOSBase.CreateInstance(instanceRepository, logger, changedStates);
                // Line : 46
                orderSpec.Attr_Command = cmdName;
            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void Verify2CreateRequester()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : resourceName = "Res1OfTest";
            //   2 : step1Cmd = "CmdC";
            //   3 : step2Cmd = "CmdA";
            //   4 : step3Cmd = "CmdD";
            //   5 : SELECT ANY resource FROM INSTANCES OF RES WHERE SELECTED.Name == resourceName;
            //   6 : SELECT ANY orderSpec1 FROM INSTANCES OF OS WHERE SELECTED.Command == step1Cmd;
            //   7 : SELECT ANY orderSpec2 FROM INSTANCES OF OS WHERE SELECTED.Command == step2Cmd;
            //   8 : SELECT ANY orderSpec3 FROM INSTANCES OF OS WHERE SELECTED.Command == step3Cmd;
            //   9 : IF NOT_EMPTY resource AND NOT_EMPTY orderSpec1 AND NOT_EMPTY orderSpec2 AND NOT_EMPTY orderSpec3
            //  10 : 	GENERATE REQ1:'Request Process'( ResourceName:resourceName, Step1Command:step1Cmd, Step2Command:step2Cmd, Step3Command:step3Cmd ) TO REQ CREATOR;
            //  11 : END IF;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var resourceName = "Res1OfTest";
            // Line : 2
            var step1Cmd = "CmdC";
            // Line : 3
            var step2Cmd = "CmdA";
            // Line : 4
            var step3Cmd = "CmdD";
            // Line : 5
            var resourceTempSet = instanceRepository.GetDomainInstances("RES").Where(selected => ((((DomainClassRES)selected).Attr_Name == resourceName)));
            if (instanceRepository.ExternalStorageAdaptor != null) resourceTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "RES", resourceTempSet, () => { return $"(Name = resourceName)"; }, () => { return DomainClassRESBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var resource = (DomainClassRES)(resourceTempSet.FirstOrDefault());

            // Line : 6
            var orderSpec1TempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == step1Cmd)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpec1TempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpec1TempSet, () => { return $"(Command = step1Cmd)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var orderSpec1 = (DomainClassOS)(orderSpec1TempSet.FirstOrDefault());

            // Line : 7
            var orderSpec2TempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == step2Cmd)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpec2TempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpec2TempSet, () => { return $"(Command = step2Cmd)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var orderSpec2 = (DomainClassOS)(orderSpec2TempSet.FirstOrDefault());

            // Line : 8
            var orderSpec3TempSet = instanceRepository.GetDomainInstances("OS").Where(selected => ((((DomainClassOS)selected).Attr_Command == step3Cmd)));
            if (instanceRepository.ExternalStorageAdaptor != null) orderSpec3TempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "OS", orderSpec3TempSet, () => { return $"(Command = step3Cmd)"; }, () => { return DomainClassOSBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var orderSpec3 = (DomainClassOS)(orderSpec3TempSet.FirstOrDefault());

            // Line : 9
            if ((((resource != null && orderSpec1 != null) && orderSpec2 != null) && orderSpec3 != null))
            {
                // Line : 10
                DomainClassREQStateMachine.REQ1_RequestProcess.Create(receiver:null, ResourceName:resourceName, Step1Command:step1Cmd, Step2Command:step2Cmd, Step3Command:step3Cmd, isSelfEvent:false, sendNow:true, instanceRepository:instanceRepository, logger:logger);

            }


            instanceRepository.SyncChangedStates(changedStates);
        }
        public void Verify3NotifyProcessStepDone()
        {
            // TODO: Let's write action code!
            // Action Description on Model as a reference.

            //   1 : SELECT ANY requester FROM INSTANCES OF REQ;
            //   2 : IF NOT_EMPTY requester
            //   3 : 	SELECT ONE currentProcStep RELATED BY requester->P[R1]->PS[R7.'current step'];
            //   4 : 	IF NOT_EMPTY currentProcStep
            //   5 : 		IF currentProcStep.Finished == FALSE
            //   6 : 			GENERATE PS2:Done TO currentProcStep;
            //   7 : 		ELSE
            //   8 : 			SELECT ONE currentIWork RELATED BY currentProcStep->IW[R5.'successor'];
            //   9 : 			GENERATE IW2:Done to currentIWork; 
            //  10 : 		END IF;
            //  11 : 	END IF;
            //  12 : END IF;


            var changedStates = new List<ChangedState>();
            
            // Generated from action description
            // Line : 1
            var requesterTempSet = instanceRepository.GetDomainInstances("REQ");
            if (instanceRepository.ExternalStorageAdaptor != null) requesterTempSet = instanceRepository.ExternalStorageAdaptor.CheckInstanceStatus(DomainName, "REQ", requesterTempSet, () => { return ""; }, () => { return DomainClassREQBase.CreateInstance(instanceRepository, logger); }, "any").Result;
            var requester = (DomainClassREQ)(requesterTempSet.FirstOrDefault());

            // Line : 2
            if (requester != null)
            {
                // Line : 3
                DomainClassPS currentProcStep = null;
                var requesterIn0RL0 = requester.LinkedR1OtherIsUserOf();
                if (requesterIn0RL0 != null)
                {
                    currentProcStep = requesterIn0RL0.LinkedR7CurrentStep();
                }

                // Line : 4
                if (currentProcStep != null)
                {
                    // Line : 5
                    if ((currentProcStep.Attr_Finished == false))
                    {
                        // Line : 6
                        if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
                        {
                            changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = currentProcStep, Event = DomainClassPSStateMachine.PS2_Done.Create(receiver:currentProcStep, false, sendNow:false) });
                        }
                        else
                        {
                            DomainClassPSStateMachine.PS2_Done.Create(receiver:currentProcStep, isSelfEvent:false, sendNow:true);
                        }

                    }
                    else
                    {
                        // Line : 8
                        var currentIWork = currentProcStep.LinkedR5OtherPredecessor();

                        // Line : 9
                        if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
                        {
                            changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = currentIWork, Event = DomainClassIWStateMachine.IW2_Done.Create(receiver:currentIWork, false, sendNow:false) });
                        }
                        else
                        {
                            DomainClassIWStateMachine.IW2_Done.Create(receiver:currentIWork, isSelfEvent:false, sendNow:true);
                        }

                    }

                }

            }


            instanceRepository.SyncChangedStates(changedStates);
        }

        public IList<string> CreateExternalEntities()
        {
            var configuration = new List<string>();
            return configuration;
        }
        public void Initialize(IDictionary<string, IDictionary<string, object>> configuration)
        {
        }
    }
}
