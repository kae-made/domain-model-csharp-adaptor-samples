// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor.ExternalStorage;

namespace ProcessManagement
{
    partial class DomainClassIWStateMachine
    {
        protected void ActionReady()
        {
            // Action Description on Model as a reference.



        }

        protected void ActionWorking()
        {
            // Action Description on Model as a reference.

            //  1 : SELECT ONE prevOrderSpec RELATED BY SELF->PS[R5.'predecessor']->OS[R4];
            //  2 : SELECT ONE nextOrderSpec RELATED BY SELF->PS[R5.'successor']->OS[R4];
            //  3 : SELF.ExecuteCommand( prevCommand:prevOrderSpec.Command, nextCommand:nextOrderSpec.Command );

            // Line : 1
            var prevOrderSpec = target.LinkedR5OtherPredecessor().LinkedR4();

            // Line : 2
            var nextOrderSpec = target.LinkedR5OneSuccessor().LinkedR4();

            // Line : 3
            target.ExecuteCommand(prevCommand:prevOrderSpec.Attr_Command, nextCommand:nextOrderSpec.Attr_Command);

        }

        protected void ActionDone()
        {
            // Action Description on Model as a reference.

            //  1 : SELECT ONE procStep RELATED BY SELF->PS[R5.'predecessor'];
            //  2 : GENERATE PS3:'Prepared' TO procStep;

            // Line : 1
            var procStep = target.LinkedR5OtherPredecessor();

            // Line : 2
            if (instanceRepository.ExternalStorageAdaptor != null && instanceRepository.ExternalStorageAdaptor.DoseEventComeFromExternal())
            {
                changedStates.Add(new CEventChangedState() { OP = ChangedState.Operation.Create, Target = procStep, Event = DomainClassPSStateMachine.PS3_Prepared.Create(receiver:procStep, false, sendNow:false) });
            }
            else
            {
                DomainClassPSStateMachine.PS3_Prepared.Create(receiver:procStep, isSelfEvent:false, sendNow:true);
            }


        }

    }
}
