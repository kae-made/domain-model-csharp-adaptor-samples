// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ProcessManagement
{
    public partial class DomainClassRAStateMachine : StateMachineBase, ITransition
    {
        public enum Events
        {
            RA1 = 0,     // Request Resource
            RA2 = 1,     // Resource Freed
            RA3 = 2    // Assigned
        }

        public enum States
        {
            _NoState_ = 0,
            WaitingForRequest = 1,
            WaitingForResource = 2,
            ResourcAssigned = 3
        }

        public class RA1_RequestResource : EventData
        {
            DomainClassRA reciever;

            public RA1_RequestResource(DomainClassRA reciever) : base((int)Events.RA1)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static RA1_RequestResource Create(DomainClassRA receiver, bool sendNow)
            {
                var newEvent = new RA1_RequestResource(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }

                return newEvent;
            }
        }

        public class RA2_ResourceFreed : EventData
        {
            DomainClassRA reciever;

            public RA2_ResourceFreed(DomainClassRA reciever) : base((int)Events.RA2)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static RA2_ResourceFreed Create(DomainClassRA receiver, bool sendNow)
            {
                var newEvent = new RA2_ResourceFreed(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }

                return newEvent;
            }
        }

        public class RA3_Assigned : EventData
        {
            DomainClassRA reciever;

            public RA3_Assigned(DomainClassRA reciever) : base((int)Events.RA3)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static RA3_Assigned Create(DomainClassRA receiver, bool sendNow)
            {
                var newEvent = new RA3_Assigned(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }

                return newEvent;
            }
        }

        protected DomainClassRA target;

        protected InstanceRepository instanceRepository;

        public DomainClassRAStateMachine(DomainClassRA target, InstanceRepository instanceRepository, Logger logger) : base(1, logger)
        {
            this.target = target;
            this.stateTransition = this;
            this.logger = logger;
            this.instanceRepository = instanceRepository;
        }

        protected int[,] stateTransitionTable = new int[3, 3]
            {
                { (int)States.WaitingForResource, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)States.ResourcAssigned, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)States.WaitingForResource, (int)States.WaitingForRequest }
            };

        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:RA(RA_ID={target.Attr_RA_ID}):entering[current={CurrentState},event={eventData.EventNumber}");


            changedStates = new List<ChangedState>();

            switch (nextState)
            {
            case (int)States.WaitingForRequest:
                ActionWaitingForRequest();
                break;
            case (int)States.WaitingForResource:
                ActionWaitingForResource();
                break;
            case (int)States.ResourcAssigned:
                ActionResourcAssigned();
                break;
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:RA(RA_ID={target.Attr_RA_ID}):entered[current={CurrentState},event={eventData.EventNumber}");


            instanceRepository.SyncChangedStates(changedStates);
        }
    }
}
