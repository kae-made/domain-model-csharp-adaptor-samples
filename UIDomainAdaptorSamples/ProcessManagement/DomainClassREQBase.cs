// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 0.1.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ProcessManagement
{
    public partial class DomainClassREQBase : DomainClassREQ
    {
        protected static readonly string className = "REQ";
        public string ClassName { get { return className; } }

        InstanceRepository instanceRepository;
        protected Logger logger;

        public static DomainClassREQBase CreateInstance(InstanceRepository instanceRepository, Logger logger=null, IList<ChangedState> changedStates=null)
        {
            var newInstance = new DomainClassREQBase(instanceRepository, logger);
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:REQ(Requester_ID={newInstance.Attr_Requester_ID}):create");

            instanceRepository.Add(newInstance);

            if (changedStates !=null) changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Create, Target = newInstance, ChangedProperties = null });

            return newInstance;
        }

        public DomainClassREQBase(InstanceRepository instanceRepository, Logger logger)
        {
            this.instanceRepository = instanceRepository;
            this.logger = logger;
            attr_Requester_ID = Guid.NewGuid().ToString();
            stateMachine = new DomainClassREQStateMachine(this, instanceRepository, logger);
        }
        protected string attr_Requester_ID;
        protected bool stateof_Requester_ID = false;

        protected DomainClassREQStateMachine stateMachine;
        protected bool stateof_current_state = false;

        protected string attr_Step1Command;
        protected bool stateof_Step1Command = false;

        protected string attr_Step2Command;
        protected bool stateof_Step2Command = false;

        protected string attr_Step3Command;
        protected bool stateof_Step3Command = false;

        protected string attr_RequestingResource_ID;
        protected bool stateof_RequestingResource_ID = false;

        public string Attr_Requester_ID { get { return attr_Requester_ID; } set { attr_Requester_ID = value; stateof_Requester_ID = true; } }
        public int Attr_current_state { get { return stateMachine.CurrentState; } }
        public string Attr_Step1Command { get { return attr_Step1Command; } set { attr_Step1Command = value; stateof_Step1Command = true; } }
        public string Attr_Step2Command { get { return attr_Step2Command; } set { attr_Step2Command = value; stateof_Step2Command = true; } }
        public string Attr_Step3Command { get { return attr_Step3Command; } set { attr_Step3Command = value; stateof_Step3Command = true; } }
        public string Attr_RequestingResource_ID { get { return attr_RequestingResource_ID; } }


        // This method can be used as compare predicattion when calling InstanceRepository's SelectInstances method. 
        public static bool Compare(DomainClassREQ instance, IDictionary<string, object> conditionPropertyValues)
        {
            bool result = true;
            foreach (var propertyName in conditionPropertyValues.Keys)
            {
                switch (propertyName)
                {
                    case "Requester_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Requester_ID)
                        {
                            result = false;
                        }
                        break;
                    case "Step1Command":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Step1Command)
                        {
                            result = false;
                        }
                        break;
                    case "Step2Command":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Step2Command)
                        {
                            result = false;
                        }
                        break;
                    case "Step3Command":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_Step3Command)
                        {
                            result = false;
                        }
                        break;
                    case "RequestingResource_ID":
                        if ((string)conditionPropertyValues[propertyName] != instance.Attr_RequestingResource_ID)
                        {
                            result = false;
                        }
                        break;
                }
                if (result== false)
                {
                    break;
                }
            }
            return result;
        }
        protected LinkedInstance relR8RESIsRequesting;
        public DomainClassRES LinkedR8IsRequesting()
        {
            if (relR8RESIsRequesting == null)
            {
           var candidates = instanceRepository.GetDomainInstances("RES").Where(inst=>(this.Attr_RequestingResource_ID==((DomainClassRES)inst).Attr_Resource_ID));
           relR8RESIsRequesting = new LinkedInstance() { Source = this, Destination = candidates.FirstOrDefault(), RelationshipID = "R8", Phrase = "IsRequesting" };

            }
            return relR8RESIsRequesting.GetDestination<DomainClassRES>();
        }

        public bool LinkR8IsRequesting(DomainClassRES instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR8RESIsRequesting == null)
            {
                this.attr_RequestingResource_ID = instance.Attr_Resource_ID;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:REQ(Requester_ID={this.Attr_Requester_ID}):link[RES(Resource_ID={instance.Attr_Resource_ID})]");

                result = (LinkedR8IsRequesting()!=null);
                if (result)
                {
                    if(changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Create, Target = relR8RESIsRequesting });
                }
            }
            return result;
        }

        public bool UnlinkR8IsRequesting(DomainClassRES instance, IList<ChangedState> changedStates=null)
        {
            bool result = false;
            if (relR8RESIsRequesting != null && ( this.Attr_RequestingResource_ID==instance.Attr_Resource_ID ))
            {
                if (changedStates != null) changedStates.Add(new CLinkChangedState() { OP = ChangedState.Operation.Delete, Target = relR8RESIsRequesting });
        
                this.attr_RequestingResource_ID = null;
                relR8RESIsRequesting = null;

                if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:REQ(Requester_ID={this.Attr_Requester_ID}):unlink[RES(Resource_ID={instance.Attr_Resource_ID})]");


                result = true;
            }
            return result;
        }
        public DomainClassP LinkedR1OtherIsUserOf()
        {
            var candidates = instanceRepository.GetDomainInstances("P").Where(inst=>(this.Attr_Requester_ID==((DomainClassP)inst).Attr_Requester_ID));
            return (DomainClassP)candidates.FirstOrDefault();
        }



        public void TakeEvent(EventData domainEvent, bool selfEvent=false)
        {
            if (selfEvent)
            {
                stateMachine.ReceivedSelfEvent(domainEvent).Wait();
            }
            else
            {
                stateMachine.ReceivedEvent(domainEvent).Wait();
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:REQ(Requester_ID={this.Attr_Requester_ID}):takeEvent({domainEvent.EventNumber})");
        }

        
        public bool Validate()
        {
            bool isValid = true;
            return isValid;
        }

        public void DeleteInstance(IList<ChangedState> changedStates=null)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:REQ(Requester_ID={this.Attr_Requester_ID}):delete");

            changedStates.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Delete, Target = this, ChangedProperties = null });

            instanceRepository.Delete(this);
        }

        // methods for storage
        public void Restore(IDictionary<string, object> propertyValues)
        {
            attr_Requester_ID = (string)propertyValues["Requester_ID"];
            stateof_Requester_ID = false;
            stateMachine.ForceUpdateState((int)propertyValues["current_state"]);
            attr_Step1Command = (string)propertyValues["Step1Command"];
            stateof_Step1Command = false;
            attr_Step2Command = (string)propertyValues["Step2Command"];
            stateof_Step2Command = false;
            attr_Step3Command = (string)propertyValues["Step3Command"];
            stateof_Step3Command = false;
            attr_RequestingResource_ID = (string)propertyValues["RequestingResource_ID"];
            stateof_RequestingResource_ID = false;
        }
        
        public IDictionary<string, object> ChangedProperties()
        {
            var results = new Dictionary<string, object>();
            if (stateof_Requester_ID)
            {
                results.Add("Requester_ID", attr_Requester_ID);
                stateof_Requester_ID = false;
            }
            results.Add("current_state", stateMachine.CurrentState);

            if (stateof_Step1Command)
            {
                results.Add("Step1Command", attr_Step1Command);
                stateof_Step1Command = false;
            }
            if (stateof_Step2Command)
            {
                results.Add("Step2Command", attr_Step2Command);
                stateof_Step2Command = false;
            }
            if (stateof_Step3Command)
            {
                results.Add("Step3Command", attr_Step3Command);
                stateof_Step3Command = false;
            }
            if (stateof_RequestingResource_ID)
            {
                results.Add("RequestingResource_ID", attr_RequestingResource_ID);
                stateof_RequestingResource_ID = false;
            }

            return results;
        }

        public string GetIdentities()
        {
            string identities = $"Requester_ID={this.Attr_Requester_ID}";

            return identities;
        }
        
        public IDictionary<string, object> GetProperties(bool onlyIdentity)
        {
            var results = new Dictionary<string, object>();

            results.Add("Requester_ID", attr_Requester_ID);
            results.Add("current_state", stateMachine.CurrentState);
            if (!onlyIdentity) results.Add("Step1Command", attr_Step1Command);
            if (!onlyIdentity) results.Add("Step2Command", attr_Step2Command);
            if (!onlyIdentity) results.Add("Step3Command", attr_Step3Command);
            if (!onlyIdentity) results.Add("RequestingResource_ID", attr_RequestingResource_ID);

            return results;
        }

#if false
        List<ChangedState> changedStates = new List<ChangedState>();

        public IList<ChangedState> ChangedStates()
        {
            List<ChangedState> results = new List<ChangedState>();
            results.AddRange(changedStates);
            results.Add(new CInstanceChagedState() { OP = ChangedState.Operation.Update, Target = this, ChangedProperties = ChangedProperties() });
            changedStates.Clear();

            return results;
        }
#endif
    }
}
