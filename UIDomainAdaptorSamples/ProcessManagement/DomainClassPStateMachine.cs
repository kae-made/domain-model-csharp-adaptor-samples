// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ProcessManagement
{
    public partial class DomainClassPStateMachine : StateMachineBase, ITransition
    {
        public enum Events
        {
            P1 = 0,     // Start Process
            P2 = 1,     // Proceed Process Step
            P3 = 2    // Done All Steps
        }

        public enum States
        {
            _NoState_ = 0,
            Prepared = 1,
            WorkingStep = 2,
            Done = 3
        }

        private interface IEventArgsRequester_IDResource_IDDef
        {
            public string Requester_ID { get; set; }
            public string Resource_ID { get; set; }
        }
        public class P1_StartProcess : EventData, IEventArgsRequester_IDResource_IDDef
        {
            DomainClassP reciever;

            public P1_StartProcess(DomainClassP reciever) : base((int)Events.P1)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public string Requester_ID { get; set; }
            public string Resource_ID { get; set; }
            public static P1_StartProcess Create(DomainClassP receiver, string Requester_ID, string Resource_ID, bool isSelfEvent, bool sendNow, InstanceRepository instanceRepository, Logger logger)
            {
                var newEvent = new P1_StartProcess(receiver) { Requester_ID = Requester_ID, Resource_ID = Resource_ID };
                if (receiver == null && instanceRepository != null)
                {
                    receiver = DomainClassPBase.CreateInstance(instanceRepository, logger);
                }
                if (sendNow)
                {
                    receiver.TakeEvent(newEvent);
                }

                return newEvent;
            }

            public override IDictionary<string, object> GetSupplementalData()
            {
                var supplementalData = new Dictionary<string, object>();

                supplementalData.Add("Requester_ID", Requester_ID);
                supplementalData.Add("Resource_ID", Resource_ID);

                return supplementalData;
            }
        }

        public class P2_ProceedProcessStep : EventData
        {
            DomainClassP reciever;

            public P2_ProceedProcessStep(DomainClassP reciever) : base((int)Events.P2)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static P2_ProceedProcessStep Create(DomainClassP receiver, bool isSelfEvent, bool sendNow)
            {
                var newEvent = new P2_ProceedProcessStep(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent, isSelfEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }

                return newEvent;
            }

            public override IDictionary<string, object> GetSupplementalData()
            {
                var supplementalData = new Dictionary<string, object>();


                return supplementalData;
            }
        }

        public class P3_DoneAllSteps : EventData
        {
            DomainClassP reciever;

            public P3_DoneAllSteps(DomainClassP reciever) : base((int)Events.P3)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static P3_DoneAllSteps Create(DomainClassP receiver, bool isSelfEvent, bool sendNow)
            {
                var newEvent = new P3_DoneAllSteps(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent, isSelfEvent);
                    }
                }
                else
                {
                    if (sendNow)
                    {
                        newEvent = null;
                    }
                }

                return newEvent;
            }

            public override IDictionary<string, object> GetSupplementalData()
            {
                var supplementalData = new Dictionary<string, object>();


                return supplementalData;
            }
        }

        protected DomainClassP target;

        protected InstanceRepository instanceRepository;

        protected string DomainName { get { return target.DomainName; } }

        // Constructor
        public DomainClassPStateMachine(DomainClassP target, bool synchronousMode, InstanceRepository instanceRepository, Logger logger) : base(0, synchronousMode, logger)
        {
            this.target = target;
            this.stateTransition = this;
            this.logger = logger;
            this.instanceRepository = instanceRepository;
        }

        protected int[,] stateTransitionTable = new int[3, 3]
            {
                { (int)ITransition.Transition.CantHappen, (int)States.WorkingStep, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)States.WorkingStep, (int)States.Done }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen }
            };

        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:P(Process_ID={target.Attr_Process_ID}):entering[current={CurrentState},event={eventData.EventNumber}");


            changedStates = new List<ChangedState>();

            switch (nextState)
            {
            case (int)States.Prepared:
                ActionPrepared(((IEventArgsRequester_IDResource_IDDef)eventData).Requester_ID, ((IEventArgsRequester_IDResource_IDDef)eventData).Resource_ID);
                break;
            case (int)States.WorkingStep:
                ActionWorkingStep();
                break;
            case (int)States.Done:
                ActionDone();
                break;
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:P(Process_ID={target.Attr_Process_ID}):entered[current={CurrentState},event={eventData.EventNumber}");


            instanceRepository.SyncChangedStates(changedStates);
        }
    }
}
