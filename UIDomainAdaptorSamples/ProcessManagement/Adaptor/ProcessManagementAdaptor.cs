// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
// </auto-generated>
// ------------------------------------------------------------------------------
using Kae.DomainModel.Csharp.Framework;
using Kae.DomainModel.Csharp.Framework.Adaptor;
using Kae.Utility.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProcessManagement.Adaptor
{
    // Entry for Application front end.
    public static class DomainModelAdaptorEntry
    {
        public static DomainModelAdaptor GetAdaptor(Logger logger) { return ProcessManagementAdaptor.GetInstance(logger); }
    }

    public class ProcessManagementAdaptor : DomainModelAdaptor
    {
        CIMProcessManagementLib domainModel;

        public static DomainModelAdaptor adapterInstance = null;

        public static DomainModelAdaptor GetInstance(Logger logger)
        {
            if (adapterInstance == null)
            {
                var instanceRepository = new InstanceRepositoryInMemory(logger);
                var cimLib = new CIMProcessManagementLib(instanceRepository);
                adapterInstance = new ProcessManagementAdaptor(cimLib, logger);
            }
            return adapterInstance;
        }


        public ProcessManagementAdaptor(CIMProcessManagementLib domainModel, Logger logger) : base(logger)
        {
            this.domainModel = domainModel;
            domainOpsParamSpecs = _domainOpsParamSpecs;
            classSpecs = _classSpecs;
            domainModelName = "ProcessManagement";
        }

        protected Dictionary<string, Dictionary<string, ParamSpec>> _domainOpsParamSpecs = new Dictionary<string, Dictionary<string, ParamSpec>>()
        {
            {
                "TestInitialize", new Dictionary<string, ParamSpec>()
                {
                    { "assignerName", new ParamSpec() {Name = "assignerName", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                }
            },
            {
                "TestCreateRequester", new Dictionary<string, ParamSpec>()
                {
                    { "resourceName", new ParamSpec() {Name = "resourceName", TypeKind = ParamSpec.DataType.String, IsArray = false} },
                    { "step1Cmd", new ParamSpec() {Name = "step1Cmd", TypeKind = ParamSpec.DataType.String, IsArray = false} },
                    { "step2Cmd", new ParamSpec() {Name = "step2Cmd", TypeKind = ParamSpec.DataType.String, IsArray = false} },
                    { "step3Cmd", new ParamSpec() {Name = "step3Cmd", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                }
            },
            {
                "TestNotifyProcessStepDone", new Dictionary<string, ParamSpec>()
                {
                    { "requestorId", new ParamSpec() {Name = "requestorId", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                }
            }
        };

        protected Dictionary<string, ClassSpec> _classSpecs = new Dictionary<string, ClassSpec>()
        {
            {
                "PS", new ClassSpec()
                {                
                    Name = "Process Spec",
                    KeyLetter = "PS",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "ProcessSpec_ID", new PropSpec()
                            { Name = "ProcessSpec_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Order_ID", new PropSpec()
                            { Name = "Order_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "Number", new PropSpec()
                            { Name = "Number", DataType = ParamSpec.DataType.Integer, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Process_ID", new PropSpec()
                            { Name = "Process_ID", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "Finished", new PropSpec()
                            { Name = "Finished", DataType = ParamSpec.DataType.Boolean, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "ExecuteCommand", new OperationSpec()
                            {
                                Name = "ExecuteCommand", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "command", new ParamSpec() {Name = "command", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "IW[R5.'successor']", new LinkSpec()
                            { Name = "IW[R5.'successor']", RelID = "R5", Phrase = "successor", Set = false, Condition = true, DstKeyLett = "IW" }
                        },
                        {
                            "IW[R5.'predecessor']", new LinkSpec()
                            { Name = "IW[R5.'predecessor']", RelID = "R5", Phrase = "predecessor", Set = false, Condition = true, DstKeyLett = "IW" }
                        },
                        {
                            "P[R3]", new LinkSpec()
                            { Name = "P[R3]", RelID = "R3", Phrase = "", Set = false, Condition = true, DstKeyLett = "P" }
                        },
                        {
                            "P[R7]", new LinkSpec()
                            { Name = "P[R7]", RelID = "R7", Phrase = "", Set = false, Condition = true, DstKeyLett = "P" }
                        },
                        {
                            "OS[R4]", new LinkSpec()
                            { Name = "OS[R4]", RelID = "R4", Phrase = "", Set = false, Condition = false, DstKeyLett = "OS" }
                        },
                        {
                            "P[R2]", new LinkSpec()
                            { Name = "P[R2]", RelID = "R2", Phrase = "", Set = false, Condition = false, DstKeyLett = "P" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "PS1_Start", new OperationSpec()
                            {
                                Name = "PS1_Start", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "PS2_Done", new OperationSpec()
                            {
                                Name = "PS2_Done", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "PS3_Prepared", new OperationSpec()
                            {
                                Name = "PS3_Prepared", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            },
            {
                "OS", new ClassSpec()
                {                
                    Name = "Order Spec",
                    KeyLetter = "OS",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "Order_ID", new PropSpec()
                            { Name = "Order_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Command", new PropSpec()
                            { Name = "Command", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "PS[R4]", new LinkSpec()
                            { Name = "PS[R4]", RelID = "R4", Phrase = "", Set = true, Condition = true, DstKeyLett = "PS" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                }
            },
            {
                "P", new ClassSpec()
                {                
                    Name = "Process",
                    KeyLetter = "P",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        },
                        {
                            "Requester_ID", new PropSpec()
                            { Name = "Requester_ID", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "Resource_ID", new PropSpec()
                            { Name = "Resource_ID", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "Process_ID", new PropSpec()
                            { Name = "Process_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "firstProcessSpec_ID", new PropSpec()
                            { Name = "firstProcessSpec_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "currentProcessSpec_ID", new PropSpec()
                            { Name = "currentProcessSpec_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "PS[R2]", new LinkSpec()
                            { Name = "PS[R2]", RelID = "R2", Phrase = "", Set = true, Condition = false, DstKeyLett = "PS" }
                        },
                        {
                            "REQ[R1.'is used by']", new LinkSpec()
                            { Name = "REQ[R1.'is used by']", RelID = "R1", Phrase = "is used by", Set = false, Condition = false, DstKeyLett = "REQ" }
                        },
                        {
                            "RES[R1.'is user of']", new LinkSpec()
                            { Name = "RES[R1.'is user of']", RelID = "R1", Phrase = "is user of", Set = false, Condition = false, DstKeyLett = "RES" }
                        },
                        {
                            "PS[R3.'first step']", new LinkSpec()
                            { Name = "PS[R3.'first step']", RelID = "R3", Phrase = "first step", Set = false, Condition = false, DstKeyLett = "PS" }
                        },
                        {
                            "PS[R7.'current step']", new LinkSpec()
                            { Name = "PS[R7.'current step']", RelID = "R7", Phrase = "current step", Set = false, Condition = false, DstKeyLett = "PS" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "P1_StartProcess", new OperationSpec()
                            {
                                Name = "P1_StartProcess", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "Requester_ID", new ParamSpec() {Name = "Requester_ID", TypeKind = ParamSpec.DataType.String, IsArray = false} }, 
                                    { "Resource_ID", new ParamSpec() {Name = "Resource_ID", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        },
                        {
                            "P2_ProceedProcessStep", new OperationSpec()
                            {
                                Name = "P2_ProceedProcessStep", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "P3_DoneAllSteps", new OperationSpec()
                            {
                                Name = "P3_DoneAllSteps", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            },
            {
                "REQ", new ClassSpec()
                {                
                    Name = "Requester",
                    KeyLetter = "REQ",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "Requester_ID", new PropSpec()
                            { Name = "Requester_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        },
                        {
                            "Step1Command", new PropSpec()
                            { Name = "Step1Command", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Step2Command", new PropSpec()
                            { Name = "Step2Command", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "Step3Command", new PropSpec()
                            { Name = "Step3Command", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "RequestingResource_ID", new PropSpec()
                            { Name = "RequestingResource_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "P[R1.'is used by']", new LinkSpec()
                            { Name = "P[R1.'is used by']", RelID = "R1", Phrase = "is used by", Set = false, Condition = true, DstKeyLett = "P" }
                        },
                        {
                            "RES[R8.'is requesting']", new LinkSpec()
                            { Name = "RES[R8.'is requesting']", RelID = "R8", Phrase = "is requesting", Set = false, Condition = true, DstKeyLett = "RES" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "REQ1_RequestProcess", new OperationSpec()
                            {
                                Name = "REQ1_RequestProcess", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "ResourceName", new ParamSpec() {Name = "ResourceName", TypeKind = ParamSpec.DataType.String, IsArray = false} }, 
                                    { "Step1Command", new ParamSpec() {Name = "Step1Command", TypeKind = ParamSpec.DataType.String, IsArray = false} }, 
                                    { "Step2Command", new ParamSpec() {Name = "Step2Command", TypeKind = ParamSpec.DataType.String, IsArray = false} }, 
                                    { "Step3Command", new ParamSpec() {Name = "Step3Command", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        },
                        {
                            "REQ2_Assigned", new OperationSpec()
                            {
                                Name = "REQ2_Assigned", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "REQ3_Done", new OperationSpec()
                            {
                                Name = "REQ3_Done", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            },
            {
                "RES", new ClassSpec()
                {                
                    Name = "Resource",
                    KeyLetter = "RES",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "Resource_ID", new PropSpec()
                            { Name = "Resource_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        },
                        {
                            "Name", new PropSpec()
                            { Name = "Name", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "RA_ID", new PropSpec()
                            { Name = "RA_ID", DataType = ParamSpec.DataType.String, Identity = 0, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "GetAssignerName", new OperationSpec()
                            {
                                Name = "GetAssignerName", ReturnType = ParamSpec.DataType.String, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "P[R1.'is user of']", new LinkSpec()
                            { Name = "P[R1.'is user of']", RelID = "R1", Phrase = "is user of", Set = false, Condition = true, DstKeyLett = "P" }
                        },
                        {
                            "REQ[R8]", new LinkSpec()
                            { Name = "REQ[R8]", RelID = "R8", Phrase = "", Set = true, Condition = true, DstKeyLett = "REQ" }
                        },
                        {
                            "RA[R6]", new LinkSpec()
                            { Name = "RA[R6]", RelID = "R6", Phrase = "", Set = false, Condition = false, DstKeyLett = "RA" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "RES1_Freed", new OperationSpec()
                            {
                                Name = "RES1_Freed", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "RES2_Assigned", new OperationSpec()
                            {
                                Name = "RES2_Assigned", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            },
            {
                "RA", new ClassSpec()
                {                
                    Name = "Resource Assigner",
                    KeyLetter = "RA",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "RA_ID", new PropSpec()
                            { Name = "RA_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        },
                        {
                            "Name", new PropSpec()
                            { Name = "Name", DataType = ParamSpec.DataType.String, Identity = 2, Writable = false, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TestString", new PropSpec()
                            { Name = "TestString", DataType = ParamSpec.DataType.String, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TestInteger", new PropSpec()
                            { Name = "TestInteger", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TestReal", new PropSpec()
                            { Name = "TestReal", DataType = ParamSpec.DataType.Real, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        },
                        {
                            "TestBoolean", new PropSpec()
                            { Name = "TestBoolean", DataType = ParamSpec.DataType.Boolean, Identity = 0, Writable = true, Mathematical = false, Reference = false, StateMachineState = false }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>(),
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "RES[R6]", new LinkSpec()
                            { Name = "RES[R6]", RelID = "R6", Phrase = "", Set = true, Condition = true, DstKeyLett = "RES" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "RA1_RequestResource", new OperationSpec()
                            {
                                Name = "RA1_RequestResource", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "RA2_ResourceFreed", new OperationSpec()
                            {
                                Name = "RA2_ResourceFreed", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "RA3_Assigned", new OperationSpec()
                            {
                                Name = "RA3_Assigned", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            },
            {
                "IW", new ClassSpec()
                {                
                    Name = "Intermediate Work",
                    KeyLetter = "IW",
                    Properties = new Dictionary<string, PropSpec>()
                    {
                        {
                            "predecessorProcessSpec_ID", new PropSpec()
                            { Name = "predecessorProcessSpec_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "successorProcessSpec_ID", new PropSpec()
                            { Name = "successorProcessSpec_ID", DataType = ParamSpec.DataType.String, Identity = 1, Writable = false, Mathematical = false, Reference = true, StateMachineState = false }
                        },
                        {
                            "current_state", new PropSpec()
                            { Name = "current_state", DataType = ParamSpec.DataType.Integer, Identity = 0, Writable = false, Mathematical = false, Reference = false, StateMachineState = true }
                        }
                    },
                    Operations = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "ExecuteCommand", new OperationSpec()
                            {
                                Name = "ExecuteCommand", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                                {
                                    { "prevCommand", new ParamSpec() {Name = "prevCommand", TypeKind = ParamSpec.DataType.String, IsArray = false} },
                                    { "nextCommand", new ParamSpec() {Name = "nextCommand", TypeKind = ParamSpec.DataType.String, IsArray = false} }
                                }
                            }
                        }
                    },
                    Links = new Dictionary<string, LinkSpec>()
                    {
                        {
                            "PS[R5.'successor']", new LinkSpec()
                            { Name = "PS[R5.'successor']", RelID = "R5", Phrase = "successor", Set = false, Condition = false, DstKeyLett = "PS" }
                        },
                        {
                            "PS[R5.'predecessor']", new LinkSpec()
                            { Name = "PS[R5.'predecessor']", RelID = "R5", Phrase = "predecessor", Set = false, Condition = false, DstKeyLett = "PS" }
                        }
                    },
                    Events = new Dictionary<string, OperationSpec>()
                    {
                        {
                            "IW1_Start", new OperationSpec()
                            {
                                Name = "IW1_Start", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        },
                        {
                            "IW2_Done", new OperationSpec()
                            {
                                Name = "IW2_Done", ReturnType = ParamSpec.DataType.Void, Parameters = new Dictionary<string, ParamSpec>()
                            }
                        }
                    }
                }
            }
        };

        public override string InvokeDomainOperation(string name, RequestingParameters parameters)
        {
            string result = "{}";
            if (domainOpsParamSpecs.ContainsKey(name))
            {
                var opSpec = domainOpsParamSpecs[name];
                RequestingParameters invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>() };
                if (CheckParameters(opSpec, parameters, invSpec))
                {
                    switch (name)
                    {
                        case "TestInitialize":
                            domainModel.TestInitialize(assignerName:(string)invSpec.Parameters["assignerName"]);
                            break;
                        case "TestCreateRequester":
                            domainModel.TestCreateRequester(resourceName:(string)invSpec.Parameters["resourceName"], step1Cmd:(string)invSpec.Parameters["step1Cmd"], step2Cmd:(string)invSpec.Parameters["step2Cmd"], step3Cmd:(string)invSpec.Parameters["step3Cmd"]);
                            break;
                        case "TestNotifyProcessStepDone":
                            domainModel.TestNotifyProcessStepDone(requestorId:(string)invSpec.Parameters["requestorId"]);
                            break;
                    }
                }
            }

            return result;
        }

        public override string InvokeDomainClassOperation(string classKeyLett, string name, RequestingParameters parameters)
        {
            string result = "{}";
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Operations.ContainsKey(name))
                {
                    var opSpec = classSpec.Operations[name];
                    var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(opSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
                                case "PS":
                                    var instanceOfPS = (DomainClassPS)domainModel.InstanceRepository.GetDomainInstances("PS").Where(selected => (((DomainClassPS)selected).Attr_ProcessSpec_ID == invSpec.Identities["ProcessSpec_ID"])).FirstOrDefault();
                                    if (instanceOfPS != null)
                                    {
                                        switch (name)
                                        {
                                            case "ExecuteCommand":
                                                instanceOfPS.ExecuteCommand(command:(string)invSpec.Parameters["command"]);
                                                break;
                                        }
                                    }
                                    break;
                                case "RES":
                                    var instanceOfRES = (DomainClassRES)domainModel.InstanceRepository.GetDomainInstances("RES").Where(selected => (((DomainClassRES)selected).Attr_Resource_ID == invSpec.Identities["Resource_ID"])).FirstOrDefault();
                                    if (instanceOfRES != null)
                                    {
                                        switch (name)
                                        {
                                            case "GetAssignerName":
                                                 var resultOfGetAssignerName = new { result = instanceOfRES.GetAssignerName() };
                                                result = Newtonsoft.Json.JsonConvert.SerializeObject(resultOfGetAssignerName);
                                                break;
                                        }
                                    }
                                    break;
                                case "IW":
                                    var instanceOfIW = (DomainClassIW)domainModel.InstanceRepository.GetDomainInstances("IW").Where(selected => (((DomainClassIW)selected).Attr_predecessorProcessSpec_ID == invSpec.Identities["predecessorProcessSpec_ID"] && ((DomainClassIW)selected).Attr_successorProcessSpec_ID == invSpec.Identities["successorProcessSpec_ID"])).FirstOrDefault();
                                    if (instanceOfIW != null)
                                    {
                                        switch (name)
                                        {
                                            case "ExecuteCommand":
                                                instanceOfIW.ExecuteCommand(prevCommand:(string)invSpec.Parameters["prevCommand"], nextCommand:(string)invSpec.Parameters["nextCommand"]);
                                                break;
                                        }
                                    }
                                    break;
                            }
                        }
                    }

                }
            }

            return result;
        }

        public override string SendEvent(string classKeyLett, string name, RequestingParameters parameters)
        {
            bool sent = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Events.ContainsKey(name))
                {
                    var evtSpec = classSpec.Events[name];
                    var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                    if (CheckIdentity(classSpec.Properties, parameters, invSpec))
                    {
                        if(CheckParameters(evtSpec.Parameters,parameters, invSpec))
                        {
                            switch (classKeyLett)
                            {
                                case "PS":
                                    var instanceOfPS = (DomainClassPS)domainModel.InstanceRepository.GetDomainInstances("PS").Where(selected => (((DomainClassPS)selected).Attr_ProcessSpec_ID == invSpec.Identities["ProcessSpec_ID"])).FirstOrDefault();
                                    switch (name)
                                    {
                                        case "PS1_Start":
                                            DomainClassPSStateMachine.PS1_Start.Create(instanceOfPS, sendNow:true);
                                            sent = true;
                                            break;
                                        case "PS2_Done":
                                            DomainClassPSStateMachine.PS2_Done.Create(instanceOfPS, sendNow:true);
                                            sent = true;
                                            break;
                                        case "PS3_Prepared":
                                            DomainClassPSStateMachine.PS3_Prepared.Create(instanceOfPS, sendNow:true);
                                            sent = true;
                                            break;
                                    }
                                    break;
                                case "P":
                                    var instanceOfP = (DomainClassP)domainModel.InstanceRepository.GetDomainInstances("P").Where(selected => (((DomainClassP)selected).Attr_Process_ID == invSpec.Identities["Process_ID"])).FirstOrDefault();
                                    switch (name)
                                    {
                                        case "P1_StartProcess":
                                            DomainClassPStateMachine.P1_StartProcess.Create(instanceOfP, Requester_ID:(string)invSpec.Parameters["Requester_ID"], Resource_ID:(string)invSpec.Parameters["Resource_ID"], sendNow:true, domainModel.InstanceRepository, logger:logger);
                                            sent = true;
                                            break;
                                        case "P2_ProceedProcessStep":
                                            DomainClassPStateMachine.P2_ProceedProcessStep.Create(instanceOfP, sendNow:true);
                                            sent = true;
                                            break;
                                        case "P3_DoneAllSteps":
                                            DomainClassPStateMachine.P3_DoneAllSteps.Create(instanceOfP, sendNow:true);
                                            sent = true;
                                            break;
                                    }
                                    break;
                                case "REQ":
                                    var instanceOfREQ = (DomainClassREQ)domainModel.InstanceRepository.GetDomainInstances("REQ").Where(selected => (((DomainClassREQ)selected).Attr_Requester_ID == invSpec.Identities["Requester_ID"])).FirstOrDefault();
                                    switch (name)
                                    {
                                        case "REQ1_RequestProcess":
                                            DomainClassREQStateMachine.REQ1_RequestProcess.Create(instanceOfREQ, ResourceName:(string)invSpec.Parameters["ResourceName"], Step1Command:(string)invSpec.Parameters["Step1Command"], Step2Command:(string)invSpec.Parameters["Step2Command"], Step3Command:(string)invSpec.Parameters["Step3Command"], sendNow:true, domainModel.InstanceRepository, logger:logger);
                                            sent = true;
                                            break;
                                        case "REQ2_Assigned":
                                            DomainClassREQStateMachine.REQ2_Assigned.Create(instanceOfREQ, sendNow:true);
                                            sent = true;
                                            break;
                                        case "REQ3_Done":
                                            DomainClassREQStateMachine.REQ3_Done.Create(instanceOfREQ, sendNow:true);
                                            sent = true;
                                            break;
                                    }
                                    break;
                                case "RES":
                                    var instanceOfRES = (DomainClassRES)domainModel.InstanceRepository.GetDomainInstances("RES").Where(selected => (((DomainClassRES)selected).Attr_Resource_ID == invSpec.Identities["Resource_ID"])).FirstOrDefault();
                                    switch (name)
                                    {
                                        case "RES1_Freed":
                                            DomainClassRESStateMachine.RES1_Freed.Create(instanceOfRES, sendNow:true);
                                            sent = true;
                                            break;
                                        case "RES2_Assigned":
                                            DomainClassRESStateMachine.RES2_Assigned.Create(instanceOfRES, sendNow:true);
                                            sent = true;
                                            break;
                                    }
                                    break;
                                case "RA":
                                    var instanceOfRA = (DomainClassRA)domainModel.InstanceRepository.GetDomainInstances("RA").Where(selected => (((DomainClassRA)selected).Attr_RA_ID == invSpec.Identities["RA_ID"])).FirstOrDefault();
                                    switch (name)
                                    {
                                        case "RA1_RequestResource":
                                            DomainClassRAStateMachine.RA1_RequestResource.Create(instanceOfRA, sendNow:true);
                                            sent = true;
                                            break;
                                        case "RA2_ResourceFreed":
                                            DomainClassRAStateMachine.RA2_ResourceFreed.Create(instanceOfRA, sendNow:true);
                                            sent = true;
                                            break;
                                        case "RA3_Assigned":
                                            DomainClassRAStateMachine.RA3_Assigned.Create(instanceOfRA, sendNow:true);
                                            sent = true;
                                            break;
                                    }
                                    break;
                                case "IW":
                                    var instanceOfIW = (DomainClassIW)domainModel.InstanceRepository.GetDomainInstances("IW").Where(selected => (((DomainClassIW)selected).Attr_predecessorProcessSpec_ID == invSpec.Identities["predecessorProcessSpec_ID"] && ((DomainClassIW)selected).Attr_successorProcessSpec_ID == invSpec.Identities["successorProcessSpec_ID"])).FirstOrDefault();
                                    switch (name)
                                    {
                                        case "IW1_Start":
                                            DomainClassIWStateMachine.IW1_Start.Create(instanceOfIW, sendNow:true);
                                            sent = true;
                                            break;
                                        case "IW2_Done":
                                            DomainClassIWStateMachine.IW2_Done.Create(instanceOfIW, sendNow:true);
                                            sent = true;
                                            break;
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
            var result = new { sent = sent };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string UpdateClassProperties(string classKeyLett, RequestingParameters parameters)
        {
            bool updated = false;
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                var invSpec = new RequestingParameters() { Parameters = new Dictionary<string, object>(), Identities = new Dictionary<string, string>() };
                if (CheckProperties(classSpec.Properties, parameters, invSpec))
                {
                    switch (classKeyLett)
                    {
                        case "PS":
                            var instanceOfPS = (DomainClassPS)domainModel.InstanceRepository.GetDomainInstances("PS").Where(selected => (((DomainClassPS)selected).Attr_ProcessSpec_ID == invSpec.Identities["ProcessSpec_ID"])).FirstOrDefault();
                            if (instanceOfPS != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Finished"))
                                {
                                    instanceOfPS.Attr_Finished = (bool)invSpec.Parameters["Finished"];
                                }
                                updated = true;
                            }
                            break;
                        case "REQ":
                            var instanceOfREQ = (DomainClassREQ)domainModel.InstanceRepository.GetDomainInstances("REQ").Where(selected => (((DomainClassREQ)selected).Attr_Requester_ID == invSpec.Identities["Requester_ID"])).FirstOrDefault();
                            if (instanceOfREQ != null)
                            {
                                if (invSpec.Parameters.ContainsKey("Step1Command"))
                                {
                                    instanceOfREQ.Attr_Step1Command = (string)invSpec.Parameters["Step1Command"];
                                }
                                if (invSpec.Parameters.ContainsKey("Step2Command"))
                                {
                                    instanceOfREQ.Attr_Step2Command = (string)invSpec.Parameters["Step2Command"];
                                }
                                if (invSpec.Parameters.ContainsKey("Step3Command"))
                                {
                                    instanceOfREQ.Attr_Step3Command = (string)invSpec.Parameters["Step3Command"];
                                }
                                updated = true;
                            }
                            break;
                        case "RA":
                            var instanceOfRA = (DomainClassRA)domainModel.InstanceRepository.GetDomainInstances("RA").Where(selected => (((DomainClassRA)selected).Attr_RA_ID == invSpec.Identities["RA_ID"])).FirstOrDefault();
                            if (instanceOfRA != null)
                            {
                                if (invSpec.Parameters.ContainsKey("TestString"))
                                {
                                    instanceOfRA.Attr_TestString = (string)invSpec.Parameters["TestString"];
                                }
                                if (invSpec.Parameters.ContainsKey("TestInteger"))
                                {
                                    instanceOfRA.Attr_TestInteger = (int)invSpec.Parameters["TestInteger"];
                                }
                                if (invSpec.Parameters.ContainsKey("TestReal"))
                                {
                                    instanceOfRA.Attr_TestReal = (double)invSpec.Parameters["TestReal"];
                                }
                                if (invSpec.Parameters.ContainsKey("TestBoolean"))
                                {
                                    instanceOfRA.Attr_TestBoolean = (bool)invSpec.Parameters["TestBoolean"];
                                }
                                updated = true;
                            }
                            break;
                    }              
                }
            }
            if (updated)
            {
                domainModel.InstanceRepository.SyncChangedStates(new List<ChangedState>());
            }
            var result = new { updated = updated };
            return Newtonsoft.Json.JsonConvert.SerializeObject(result);
        }

        public override string GetInstances(string classKeyLett)
        {
            List<Dictionary<string, object>> resultInstances = GetInstancesRaw(classKeyLett);

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        protected List<Dictionary<string, object>> GetInstancesRaw(string classKeyLett)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var instances = domainModel.InstanceRepository.GetDomainInstances(classKeyLett);
                foreach (var instance in instances)
                {
                    switch (classKeyLett)
                    {
                        case "PS":
                            var instanceOfPS = (DomainClassPS)instance;
                            var resultOfinstanceOfPS = new Dictionary<string, object>();
                            resultOfinstanceOfPS.Add("ProcessSpec_ID", instanceOfPS.Attr_ProcessSpec_ID);
                            resultOfinstanceOfPS.Add("Order_ID", instanceOfPS.Attr_Order_ID);
                            resultOfinstanceOfPS.Add("Number", instanceOfPS.Attr_Number);
                            resultOfinstanceOfPS.Add("Process_ID", instanceOfPS.Attr_Process_ID);
                            resultOfinstanceOfPS.Add("Finished", instanceOfPS.Attr_Finished);
                            resultOfinstanceOfPS.Add("current_state", instanceOfPS.Attr_current_state);
                            resultInstances.Add(resultOfinstanceOfPS);
                            break;
                        case "OS":
                            var instanceOfOS = (DomainClassOS)instance;
                            var resultOfinstanceOfOS = new Dictionary<string, object>();
                            resultOfinstanceOfOS.Add("Order_ID", instanceOfOS.Attr_Order_ID);
                            resultOfinstanceOfOS.Add("Command", instanceOfOS.Attr_Command);
                            resultInstances.Add(resultOfinstanceOfOS);
                            break;
                        case "P":
                            var instanceOfP = (DomainClassP)instance;
                            var resultOfinstanceOfP = new Dictionary<string, object>();
                            resultOfinstanceOfP.Add("current_state", instanceOfP.Attr_current_state);
                            resultOfinstanceOfP.Add("Requester_ID", instanceOfP.Attr_Requester_ID);
                            resultOfinstanceOfP.Add("Resource_ID", instanceOfP.Attr_Resource_ID);
                            resultOfinstanceOfP.Add("Process_ID", instanceOfP.Attr_Process_ID);
                            resultOfinstanceOfP.Add("firstProcessSpec_ID", instanceOfP.Attr_firstProcessSpec_ID);
                            resultOfinstanceOfP.Add("currentProcessSpec_ID", instanceOfP.Attr_currentProcessSpec_ID);
                            resultInstances.Add(resultOfinstanceOfP);
                            break;
                        case "REQ":
                            var instanceOfREQ = (DomainClassREQ)instance;
                            var resultOfinstanceOfREQ = new Dictionary<string, object>();
                            resultOfinstanceOfREQ.Add("Requester_ID", instanceOfREQ.Attr_Requester_ID);
                            resultOfinstanceOfREQ.Add("current_state", instanceOfREQ.Attr_current_state);
                            resultOfinstanceOfREQ.Add("Step1Command", instanceOfREQ.Attr_Step1Command);
                            resultOfinstanceOfREQ.Add("Step2Command", instanceOfREQ.Attr_Step2Command);
                            resultOfinstanceOfREQ.Add("Step3Command", instanceOfREQ.Attr_Step3Command);
                            resultOfinstanceOfREQ.Add("RequestingResource_ID", instanceOfREQ.Attr_RequestingResource_ID);
                            resultInstances.Add(resultOfinstanceOfREQ);
                            break;
                        case "RES":
                            var instanceOfRES = (DomainClassRES)instance;
                            var resultOfinstanceOfRES = new Dictionary<string, object>();
                            resultOfinstanceOfRES.Add("Resource_ID", instanceOfRES.Attr_Resource_ID);
                            resultOfinstanceOfRES.Add("current_state", instanceOfRES.Attr_current_state);
                            resultOfinstanceOfRES.Add("Name", instanceOfRES.Attr_Name);
                            resultOfinstanceOfRES.Add("RA_ID", instanceOfRES.Attr_RA_ID);
                            resultInstances.Add(resultOfinstanceOfRES);
                            break;
                        case "RA":
                            var instanceOfRA = (DomainClassRA)instance;
                            var resultOfinstanceOfRA = new Dictionary<string, object>();
                            resultOfinstanceOfRA.Add("RA_ID", instanceOfRA.Attr_RA_ID);
                            resultOfinstanceOfRA.Add("current_state", instanceOfRA.Attr_current_state);
                            resultOfinstanceOfRA.Add("Name", instanceOfRA.Attr_Name);
                            resultOfinstanceOfRA.Add("TestString", instanceOfRA.Attr_TestString);
                            resultOfinstanceOfRA.Add("TestInteger", instanceOfRA.Attr_TestInteger);
                            resultOfinstanceOfRA.Add("TestReal", instanceOfRA.Attr_TestReal);
                            resultOfinstanceOfRA.Add("TestBoolean", instanceOfRA.Attr_TestBoolean);
                            resultInstances.Add(resultOfinstanceOfRA);
                            break;
                        case "IW":
                            var instanceOfIW = (DomainClassIW)instance;
                            var resultOfinstanceOfIW = new Dictionary<string, object>();
                            resultOfinstanceOfIW.Add("predecessorProcessSpec_ID", instanceOfIW.Attr_predecessorProcessSpec_ID);
                            resultOfinstanceOfIW.Add("successorProcessSpec_ID", instanceOfIW.Attr_successorProcessSpec_ID);
                            resultOfinstanceOfIW.Add("current_state", instanceOfIW.Attr_current_state);
                            resultInstances.Add(resultOfinstanceOfIW);
                            break;
                    }
                }
                
            }

            return resultInstances;
        }

        public override string GetInstance(string classKeyLett, IDictionary<string, string> identities)
        {
            Dictionary<string, object> resultInstance = new Dictionary<string, object>();
            switch (classKeyLett)
            {
                case "PS":
                    DomainClassPS instanceOfPS = (DomainClassPS)domainModel.InstanceRepository.GetDomainInstances("PS").Where(selected => (((DomainClassPS)selected).Attr_ProcessSpec_ID == identities["ProcessSpec_ID"])).FirstOrDefault();
                    if (instanceOfPS != null)
                    {
                        resultInstance.Add("ProcessSpec_ID", instanceOfPS.Attr_ProcessSpec_ID);
                        resultInstance.Add("Order_ID", instanceOfPS.Attr_Order_ID);
                        resultInstance.Add("Number", instanceOfPS.Attr_Number);
                        resultInstance.Add("Process_ID", instanceOfPS.Attr_Process_ID);
                        resultInstance.Add("Finished", instanceOfPS.Attr_Finished);
                        resultInstance.Add("current_state", instanceOfPS.Attr_current_state);
                    }
                    break;
                case "OS":
                    DomainClassOS instanceOfOS = (DomainClassOS)domainModel.InstanceRepository.GetDomainInstances("OS").Where(selected => (((DomainClassOS)selected).Attr_Order_ID == identities["Order_ID"])).FirstOrDefault();
                    if (instanceOfOS != null)
                    {
                        resultInstance.Add("Order_ID", instanceOfOS.Attr_Order_ID);
                        resultInstance.Add("Command", instanceOfOS.Attr_Command);
                    }
                    break;
                case "P":
                    DomainClassP instanceOfP = (DomainClassP)domainModel.InstanceRepository.GetDomainInstances("P").Where(selected => (((DomainClassP)selected).Attr_Process_ID == identities["Process_ID"])).FirstOrDefault();
                    if (instanceOfP != null)
                    {
                        resultInstance.Add("current_state", instanceOfP.Attr_current_state);
                        resultInstance.Add("Requester_ID", instanceOfP.Attr_Requester_ID);
                        resultInstance.Add("Resource_ID", instanceOfP.Attr_Resource_ID);
                        resultInstance.Add("Process_ID", instanceOfP.Attr_Process_ID);
                        resultInstance.Add("firstProcessSpec_ID", instanceOfP.Attr_firstProcessSpec_ID);
                        resultInstance.Add("currentProcessSpec_ID", instanceOfP.Attr_currentProcessSpec_ID);
                    }
                    break;
                case "REQ":
                    DomainClassREQ instanceOfREQ = (DomainClassREQ)domainModel.InstanceRepository.GetDomainInstances("REQ").Where(selected => (((DomainClassREQ)selected).Attr_Requester_ID == identities["Requester_ID"])).FirstOrDefault();
                    if (instanceOfREQ != null)
                    {
                        resultInstance.Add("Requester_ID", instanceOfREQ.Attr_Requester_ID);
                        resultInstance.Add("current_state", instanceOfREQ.Attr_current_state);
                        resultInstance.Add("Step1Command", instanceOfREQ.Attr_Step1Command);
                        resultInstance.Add("Step2Command", instanceOfREQ.Attr_Step2Command);
                        resultInstance.Add("Step3Command", instanceOfREQ.Attr_Step3Command);
                        resultInstance.Add("RequestingResource_ID", instanceOfREQ.Attr_RequestingResource_ID);
                    }
                    break;
                case "RES":
                    DomainClassRES instanceOfRES = (DomainClassRES)domainModel.InstanceRepository.GetDomainInstances("RES").Where(selected => (((DomainClassRES)selected).Attr_Resource_ID == identities["Resource_ID"])).FirstOrDefault();
                    if (instanceOfRES != null)
                    {
                        resultInstance.Add("Resource_ID", instanceOfRES.Attr_Resource_ID);
                        resultInstance.Add("current_state", instanceOfRES.Attr_current_state);
                        resultInstance.Add("Name", instanceOfRES.Attr_Name);
                        resultInstance.Add("RA_ID", instanceOfRES.Attr_RA_ID);
                    }
                    break;
                case "RA":
                    DomainClassRA instanceOfRA = (DomainClassRA)domainModel.InstanceRepository.GetDomainInstances("RA").Where(selected => (((DomainClassRA)selected).Attr_RA_ID == identities["RA_ID"])).FirstOrDefault();
                    if (instanceOfRA != null)
                    {
                        resultInstance.Add("RA_ID", instanceOfRA.Attr_RA_ID);
                        resultInstance.Add("current_state", instanceOfRA.Attr_current_state);
                        resultInstance.Add("Name", instanceOfRA.Attr_Name);
                        resultInstance.Add("TestString", instanceOfRA.Attr_TestString);
                        resultInstance.Add("TestInteger", instanceOfRA.Attr_TestInteger);
                        resultInstance.Add("TestReal", instanceOfRA.Attr_TestReal);
                        resultInstance.Add("TestBoolean", instanceOfRA.Attr_TestBoolean);
                    }
                    break;
                case "IW":
                    DomainClassIW instanceOfIW = (DomainClassIW)domainModel.InstanceRepository.GetDomainInstances("IW").Where(selected => (((DomainClassIW)selected).Attr_predecessorProcessSpec_ID == identities["predecessorProcessSpec_ID"] && ((DomainClassIW)selected).Attr_successorProcessSpec_ID == identities["successorProcessSpec_ID"])).FirstOrDefault();
                    if (instanceOfIW != null)
                    {
                        resultInstance.Add("predecessorProcessSpec_ID", instanceOfIW.Attr_predecessorProcessSpec_ID);
                        resultInstance.Add("successorProcessSpec_ID", instanceOfIW.Attr_successorProcessSpec_ID);
                        resultInstance.Add("current_state", instanceOfIW.Attr_current_state);
                    }
                    break;
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstance);
        }

        public override string GetLinkedInstances(string classKeyLett, IDictionary<string, string> identities, string relName)
        {
            var resultInstances = new List<Dictionary<string, object>>();
            if (classSpecs.ContainsKey(classKeyLett))
            {
                var classSpec = classSpecs[classKeyLett];
                if (classSpec.Links.ContainsKey(relName))
                {
                    switch (classKeyLett)
                    {
                        case "PS":
                            DomainClassPS instanceOfPS = (DomainClassPS)domainModel.InstanceRepository.GetDomainInstances("PS").Where(selected => (((DomainClassPS)selected).Attr_ProcessSpec_ID == identities["ProcessSpec_ID"])).FirstOrDefault();
                            if (instanceOfPS != null)
                            {
                                switch (relName)
                                {
                                    case "IW[R5.'successor']":
                                        var linkedInstanceOfR5OneSuccessorIW = instanceOfPS.LinkedR5OtherPredecessor();
                                        if (linkedInstanceOfR5OneSuccessorIW != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "predecessorProcessSpec_ID", linkedInstanceOfR5OneSuccessorIW.Attr_predecessorProcessSpec_ID },
                                                { "successorProcessSpec_ID", linkedInstanceOfR5OneSuccessorIW.Attr_successorProcessSpec_ID },
                                                { "current_state", linkedInstanceOfR5OneSuccessorIW.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "IW[R5.'predecessor']":
                                        var linkedInstanceOfR5OtherPredecessorIW = instanceOfPS.LinkedR5OneSuccessor();
                                        if (linkedInstanceOfR5OtherPredecessorIW != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "predecessorProcessSpec_ID", linkedInstanceOfR5OtherPredecessorIW.Attr_predecessorProcessSpec_ID },
                                                { "successorProcessSpec_ID", linkedInstanceOfR5OtherPredecessorIW.Attr_successorProcessSpec_ID },
                                                { "current_state", linkedInstanceOfR5OtherPredecessorIW.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "P[R3]":
                                        var linkedInstanceOfR3P = instanceOfPS.LinkedR3();
                                        if (linkedInstanceOfR3P != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "current_state", linkedInstanceOfR3P.Attr_current_state },
                                                { "Requester_ID", linkedInstanceOfR3P.Attr_Requester_ID },
                                                { "Resource_ID", linkedInstanceOfR3P.Attr_Resource_ID },
                                                { "Process_ID", linkedInstanceOfR3P.Attr_Process_ID },
                                                { "firstProcessSpec_ID", linkedInstanceOfR3P.Attr_firstProcessSpec_ID },
                                                { "currentProcessSpec_ID", linkedInstanceOfR3P.Attr_currentProcessSpec_ID }
                                            });
                                        }
                                        break;
                                    case "P[R7]":
                                        var linkedInstanceOfR7P = instanceOfPS.LinkedR7();
                                        if (linkedInstanceOfR7P != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "current_state", linkedInstanceOfR7P.Attr_current_state },
                                                { "Requester_ID", linkedInstanceOfR7P.Attr_Requester_ID },
                                                { "Resource_ID", linkedInstanceOfR7P.Attr_Resource_ID },
                                                { "Process_ID", linkedInstanceOfR7P.Attr_Process_ID },
                                                { "firstProcessSpec_ID", linkedInstanceOfR7P.Attr_firstProcessSpec_ID },
                                                { "currentProcessSpec_ID", linkedInstanceOfR7P.Attr_currentProcessSpec_ID }
                                            });
                                        }
                                        break;
                                    case "OS[R4]":
                                        var linkedInstanceOfR4OS = instanceOfPS.LinkedR4();
                                        if (linkedInstanceOfR4OS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "Order_ID", linkedInstanceOfR4OS.Attr_Order_ID },
                                                { "Command", linkedInstanceOfR4OS.Attr_Command }
                                            });
                                        }
                                        break;
                                    case "P[R2]":
                                        var linkedInstanceOfR2P = instanceOfPS.LinkedR2();
                                        if (linkedInstanceOfR2P != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "current_state", linkedInstanceOfR2P.Attr_current_state },
                                                { "Requester_ID", linkedInstanceOfR2P.Attr_Requester_ID },
                                                { "Resource_ID", linkedInstanceOfR2P.Attr_Resource_ID },
                                                { "Process_ID", linkedInstanceOfR2P.Attr_Process_ID },
                                                { "firstProcessSpec_ID", linkedInstanceOfR2P.Attr_firstProcessSpec_ID },
                                                { "currentProcessSpec_ID", linkedInstanceOfR2P.Attr_currentProcessSpec_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "OS":
                            DomainClassOS instanceOfOS = (DomainClassOS)domainModel.InstanceRepository.GetDomainInstances("OS").Where(selected => (((DomainClassOS)selected).Attr_Order_ID == identities["Order_ID"])).FirstOrDefault();
                            if (instanceOfOS != null)
                            {
                                switch (relName)
                                {
                                    case "PS[R4]":
                                        var linkedInstancesOfR4PS = instanceOfOS.LinkedR4();
                                        foreach (var linkedInstanceOfR4PS in linkedInstancesOfR4PS)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "ProcessSpec_ID", linkedInstanceOfR4PS.Attr_ProcessSpec_ID },
                                                { "Order_ID", linkedInstanceOfR4PS.Attr_Order_ID },
                                                { "Number", linkedInstanceOfR4PS.Attr_Number },
                                                { "Process_ID", linkedInstanceOfR4PS.Attr_Process_ID },
                                                { "Finished", linkedInstanceOfR4PS.Attr_Finished },
                                                { "current_state", linkedInstanceOfR4PS.Attr_current_state }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "P":
                            DomainClassP instanceOfP = (DomainClassP)domainModel.InstanceRepository.GetDomainInstances("P").Where(selected => (((DomainClassP)selected).Attr_Process_ID == identities["Process_ID"])).FirstOrDefault();
                            if (instanceOfP != null)
                            {
                                switch (relName)
                                {
                                    case "PS[R2]":
                                        var linkedInstancesOfR2PS = instanceOfP.LinkedR2();
                                        foreach (var linkedInstanceOfR2PS in linkedInstancesOfR2PS)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "ProcessSpec_ID", linkedInstanceOfR2PS.Attr_ProcessSpec_ID },
                                                { "Order_ID", linkedInstanceOfR2PS.Attr_Order_ID },
                                                { "Number", linkedInstanceOfR2PS.Attr_Number },
                                                { "Process_ID", linkedInstanceOfR2PS.Attr_Process_ID },
                                                { "Finished", linkedInstanceOfR2PS.Attr_Finished },
                                                { "current_state", linkedInstanceOfR2PS.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "REQ[R1.'is used by']":
                                        var linkedInstanceOfR1OneIsUsedByREQ = instanceOfP.LinkedR1OneIsUsedBy();
                                        if (linkedInstanceOfR1OneIsUsedByREQ != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "Requester_ID", linkedInstanceOfR1OneIsUsedByREQ.Attr_Requester_ID },
                                                { "current_state", linkedInstanceOfR1OneIsUsedByREQ.Attr_current_state },
                                                { "Step1Command", linkedInstanceOfR1OneIsUsedByREQ.Attr_Step1Command },
                                                { "Step2Command", linkedInstanceOfR1OneIsUsedByREQ.Attr_Step2Command },
                                                { "Step3Command", linkedInstanceOfR1OneIsUsedByREQ.Attr_Step3Command },
                                                { "RequestingResource_ID", linkedInstanceOfR1OneIsUsedByREQ.Attr_RequestingResource_ID }
                                            });
                                        }
                                        break;
                                    case "RES[R1.'is user of']":
                                        var linkedInstanceOfR1OtherIsUserOfRES = instanceOfP.LinkedR1OtherIsUserOf();
                                        if (linkedInstanceOfR1OtherIsUserOfRES != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "Resource_ID", linkedInstanceOfR1OtherIsUserOfRES.Attr_Resource_ID },
                                                { "current_state", linkedInstanceOfR1OtherIsUserOfRES.Attr_current_state },
                                                { "Name", linkedInstanceOfR1OtherIsUserOfRES.Attr_Name },
                                                { "RA_ID", linkedInstanceOfR1OtherIsUserOfRES.Attr_RA_ID }
                                            });
                                        }
                                        break;
                                    case "PS[R3.'first step']":
                                        var linkedInstanceOfR3FirstStepPS = instanceOfP.LinkedR3FirstStep();
                                        if (linkedInstanceOfR3FirstStepPS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "ProcessSpec_ID", linkedInstanceOfR3FirstStepPS.Attr_ProcessSpec_ID },
                                                { "Order_ID", linkedInstanceOfR3FirstStepPS.Attr_Order_ID },
                                                { "Number", linkedInstanceOfR3FirstStepPS.Attr_Number },
                                                { "Process_ID", linkedInstanceOfR3FirstStepPS.Attr_Process_ID },
                                                { "Finished", linkedInstanceOfR3FirstStepPS.Attr_Finished },
                                                { "current_state", linkedInstanceOfR3FirstStepPS.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "PS[R7.'current step']":
                                        var linkedInstanceOfR7CurrentStepPS = instanceOfP.LinkedR7CurrentStep();
                                        if (linkedInstanceOfR7CurrentStepPS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "ProcessSpec_ID", linkedInstanceOfR7CurrentStepPS.Attr_ProcessSpec_ID },
                                                { "Order_ID", linkedInstanceOfR7CurrentStepPS.Attr_Order_ID },
                                                { "Number", linkedInstanceOfR7CurrentStepPS.Attr_Number },
                                                { "Process_ID", linkedInstanceOfR7CurrentStepPS.Attr_Process_ID },
                                                { "Finished", linkedInstanceOfR7CurrentStepPS.Attr_Finished },
                                                { "current_state", linkedInstanceOfR7CurrentStepPS.Attr_current_state }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "REQ":
                            DomainClassREQ instanceOfREQ = (DomainClassREQ)domainModel.InstanceRepository.GetDomainInstances("REQ").Where(selected => (((DomainClassREQ)selected).Attr_Requester_ID == identities["Requester_ID"])).FirstOrDefault();
                            if (instanceOfREQ != null)
                            {
                                switch (relName)
                                {
                                    case "P[R1.'is used by']":
                                        var linkedInstanceOfR1OneIsUsedByP = instanceOfREQ.LinkedR1OtherIsUserOf();
                                        if (linkedInstanceOfR1OneIsUsedByP != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "current_state", linkedInstanceOfR1OneIsUsedByP.Attr_current_state },
                                                { "Requester_ID", linkedInstanceOfR1OneIsUsedByP.Attr_Requester_ID },
                                                { "Resource_ID", linkedInstanceOfR1OneIsUsedByP.Attr_Resource_ID },
                                                { "Process_ID", linkedInstanceOfR1OneIsUsedByP.Attr_Process_ID },
                                                { "firstProcessSpec_ID", linkedInstanceOfR1OneIsUsedByP.Attr_firstProcessSpec_ID },
                                                { "currentProcessSpec_ID", linkedInstanceOfR1OneIsUsedByP.Attr_currentProcessSpec_ID }
                                            });
                                        }
                                        break;
                                    case "RES[R8.'is requesting']":
                                        var linkedInstanceOfR8IsRequestingRES = instanceOfREQ.LinkedR8IsRequesting();
                                        if (linkedInstanceOfR8IsRequestingRES != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "Resource_ID", linkedInstanceOfR8IsRequestingRES.Attr_Resource_ID },
                                                { "current_state", linkedInstanceOfR8IsRequestingRES.Attr_current_state },
                                                { "Name", linkedInstanceOfR8IsRequestingRES.Attr_Name },
                                                { "RA_ID", linkedInstanceOfR8IsRequestingRES.Attr_RA_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "RES":
                            DomainClassRES instanceOfRES = (DomainClassRES)domainModel.InstanceRepository.GetDomainInstances("RES").Where(selected => (((DomainClassRES)selected).Attr_Resource_ID == identities["Resource_ID"])).FirstOrDefault();
                            if (instanceOfRES != null)
                            {
                                switch (relName)
                                {
                                    case "P[R1.'is user of']":
                                        var linkedInstanceOfR1OtherIsUserOfP = instanceOfRES.LinkedR1OneIsUsedBy();
                                        if (linkedInstanceOfR1OtherIsUserOfP != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "current_state", linkedInstanceOfR1OtherIsUserOfP.Attr_current_state },
                                                { "Requester_ID", linkedInstanceOfR1OtherIsUserOfP.Attr_Requester_ID },
                                                { "Resource_ID", linkedInstanceOfR1OtherIsUserOfP.Attr_Resource_ID },
                                                { "Process_ID", linkedInstanceOfR1OtherIsUserOfP.Attr_Process_ID },
                                                { "firstProcessSpec_ID", linkedInstanceOfR1OtherIsUserOfP.Attr_firstProcessSpec_ID },
                                                { "currentProcessSpec_ID", linkedInstanceOfR1OtherIsUserOfP.Attr_currentProcessSpec_ID }
                                            });
                                        }
                                        break;
                                    case "REQ[R8]":
                                        var linkedInstancesOfR8REQ = instanceOfRES.LinkedR8();
                                        foreach (var linkedInstanceOfR8REQ in linkedInstancesOfR8REQ)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "Requester_ID", linkedInstanceOfR8REQ.Attr_Requester_ID },
                                                { "current_state", linkedInstanceOfR8REQ.Attr_current_state },
                                                { "Step1Command", linkedInstanceOfR8REQ.Attr_Step1Command },
                                                { "Step2Command", linkedInstanceOfR8REQ.Attr_Step2Command },
                                                { "Step3Command", linkedInstanceOfR8REQ.Attr_Step3Command },
                                                { "RequestingResource_ID", linkedInstanceOfR8REQ.Attr_RequestingResource_ID }
                                            });
                                        }
                                        break;
                                    case "RA[R6]":
                                        var linkedInstanceOfR6RA = instanceOfRES.LinkedR6();
                                        if (linkedInstanceOfR6RA != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "RA_ID", linkedInstanceOfR6RA.Attr_RA_ID },
                                                { "current_state", linkedInstanceOfR6RA.Attr_current_state },
                                                { "Name", linkedInstanceOfR6RA.Attr_Name },
                                                { "TestString", linkedInstanceOfR6RA.Attr_TestString },
                                                { "TestInteger", linkedInstanceOfR6RA.Attr_TestInteger },
                                                { "TestReal", linkedInstanceOfR6RA.Attr_TestReal },
                                                { "TestBoolean", linkedInstanceOfR6RA.Attr_TestBoolean }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "RA":
                            DomainClassRA instanceOfRA = (DomainClassRA)domainModel.InstanceRepository.GetDomainInstances("RA").Where(selected => (((DomainClassRA)selected).Attr_RA_ID == identities["RA_ID"])).FirstOrDefault();
                            if (instanceOfRA != null)
                            {
                                switch (relName)
                                {
                                    case "RES[R6]":
                                        var linkedInstancesOfR6RES = instanceOfRA.LinkedR6();
                                        foreach (var linkedInstanceOfR6RES in linkedInstancesOfR6RES)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "Resource_ID", linkedInstanceOfR6RES.Attr_Resource_ID },
                                                { "current_state", linkedInstanceOfR6RES.Attr_current_state },
                                                { "Name", linkedInstanceOfR6RES.Attr_Name },
                                                { "RA_ID", linkedInstanceOfR6RES.Attr_RA_ID }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                        case "IW":
                            DomainClassIW instanceOfIW = (DomainClassIW)domainModel.InstanceRepository.GetDomainInstances("IW").Where(selected => (((DomainClassIW)selected).Attr_predecessorProcessSpec_ID == identities["predecessorProcessSpec_ID"] && ((DomainClassIW)selected).Attr_successorProcessSpec_ID == identities["successorProcessSpec_ID"])).FirstOrDefault();
                            if (instanceOfIW != null)
                            {
                                switch (relName)
                                {
                                    case "PS[R5.'successor']":
                                        var linkedInstanceOfR5OneSuccessorPS = instanceOfIW.LinkedR5OneSuccessor();
                                        if (linkedInstanceOfR5OneSuccessorPS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "ProcessSpec_ID", linkedInstanceOfR5OneSuccessorPS.Attr_ProcessSpec_ID },
                                                { "Order_ID", linkedInstanceOfR5OneSuccessorPS.Attr_Order_ID },
                                                { "Number", linkedInstanceOfR5OneSuccessorPS.Attr_Number },
                                                { "Process_ID", linkedInstanceOfR5OneSuccessorPS.Attr_Process_ID },
                                                { "Finished", linkedInstanceOfR5OneSuccessorPS.Attr_Finished },
                                                { "current_state", linkedInstanceOfR5OneSuccessorPS.Attr_current_state }
                                            });
                                        }
                                        break;
                                    case "PS[R5.'predecessor']":
                                        var linkedInstanceOfR5OtherPredecessorPS = instanceOfIW.LinkedR5OtherPredecessor();
                                        if (linkedInstanceOfR5OtherPredecessorPS != null)
                                        {
                                            resultInstances.Add(new Dictionary<string, object>()
                                            {
                                                { "ProcessSpec_ID", linkedInstanceOfR5OtherPredecessorPS.Attr_ProcessSpec_ID },
                                                { "Order_ID", linkedInstanceOfR5OtherPredecessorPS.Attr_Order_ID },
                                                { "Number", linkedInstanceOfR5OtherPredecessorPS.Attr_Number },
                                                { "Process_ID", linkedInstanceOfR5OtherPredecessorPS.Attr_Process_ID },
                                                { "Finished", linkedInstanceOfR5OtherPredecessorPS.Attr_Finished },
                                                { "current_state", linkedInstanceOfR5OtherPredecessorPS.Attr_current_state }
                                            });
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }

            return Newtonsoft.Json.JsonConvert.SerializeObject(resultInstances);
        }

        public override string GetDomainOperationsSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(domainOpsParamSpecs);
            return result;
        }

        public override string GetClassesSpec()
        {
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(classSpecs);
            return result; 
        }

        public override string GetDomainModelSpec()
        {
            var spec = new {
                name = "ProcessManagement",
                operations = domainOpsParamSpecs,
                classes = classSpecs
            };
            string result = Newtonsoft.Json.JsonConvert.SerializeObject(spec);
            return result;
        }

        public override void RegisterUpdateHandler(ClassPropertiesUpdateHandler classPropertiesUpdateHandler, RelationshipUpdateHandler relationshipUpdateHandler)
        {
            domainModel.InstanceRepository.ClassPropertiesUpdated += classPropertiesUpdateHandler;
            domainModel.InstanceRepository.RelationshipUpdated += relationshipUpdateHandler;
        }

        public override void LoadDomainInstances(string instances)
        {
            string domainName = "ProcessManagement";
            var instancesJson = Newtonsoft.Json.JsonConvert.DeserializeObject<IDictionary<string, IList<IDictionary<string, object>>>>(instances);
            domainModel.InstanceRepository.LoadState(domainName, instancesJson);
        }

        public override string SaveDomainInstances()
        {
            Dictionary<string, List<Dictionary<string, object>>> instances = new Dictionary<string, List<Dictionary<string, object>>>();
            foreach(var ck in classSpecs.Keys)
            {
                var classInstances = GetInstancesRaw(ck);
                if (classInstances.Count > 0)
                {
                    instances.Add(ck, classInstances);
                }
            }
            return Newtonsoft.Json.JsonConvert.SerializeObject(instances);
        }
    }
}
