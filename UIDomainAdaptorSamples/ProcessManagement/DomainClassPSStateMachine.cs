// ------------------------------------------------------------------------------
// <auto-generated>
//     This file is generated by tool.
//     Runtime Version : 1.0.0
//  
//     Updates this file cause incorrect behavior 
//     and will be lost when the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Kae.StateMachine;
using Kae.Utility.Logging;
using Kae.DomainModel.Csharp.Framework;

namespace ProcessManagement
{
    public partial class DomainClassPSStateMachine : StateMachineBase, ITransition
    {
        public enum Events
        {
            PS1 = 0,     // Start
            PS2 = 1,     // Done
            PS3 = 2    // Prepared
        }

        public enum States
        {
            _NoState_ = 0,
            Ready = 1,
            Working = 2,
            WaitForNextPreparetion = 3,
            Done = 4
        }

        public class PS1_Start : EventData
        {
            DomainClassPS reciever;

            public PS1_Start(DomainClassPS reciever) : base((int)Events.PS1)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static PS1_Start Create(DomainClassPS receiver, bool sendNow)
            {
                var newEvent = new PS1_Start(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }

                return newEvent;
            }
        }

        public class PS2_Done : EventData
        {
            DomainClassPS reciever;

            public PS2_Done(DomainClassPS reciever) : base((int)Events.PS2)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static PS2_Done Create(DomainClassPS receiver, bool sendNow)
            {
                var newEvent = new PS2_Done(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }

                return newEvent;
            }
        }

        public class PS3_Prepared : EventData
        {
            DomainClassPS reciever;

            public PS3_Prepared(DomainClassPS reciever) : base((int)Events.PS3)
            {
                this.reciever = reciever;
            }

            public override void Send()
            {
                reciever.TakeEvent(this);
            }

            public static PS3_Prepared Create(DomainClassPS receiver, bool sendNow)
            {
                var newEvent = new PS3_Prepared(receiver);
                if (receiver != null)
                {
                    if (sendNow)
                    {
                        receiver.TakeEvent(newEvent);
                    }
                }

                return newEvent;
            }
        }

        protected DomainClassPS target;

        protected InstanceRepository instanceRepository;

        public DomainClassPSStateMachine(DomainClassPS target, InstanceRepository instanceRepository, Logger logger) : base(1, logger)
        {
            this.target = target;
            this.stateTransition = this;
            this.logger = logger;
            this.instanceRepository = instanceRepository;
        }

        protected int[,] stateTransitionTable = new int[4, 3]
            {
                { (int)States.Working, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)States.WaitForNextPreparetion, (int)ITransition.Transition.CantHappen }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)States.Done }, 
                { (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen, (int)ITransition.Transition.CantHappen }
            };

        public int GetNextState(int currentState, int eventNumber)
        {
            return stateTransitionTable[currentState, eventNumber];
        }

        private List<ChangedState> changedStates;

        protected override void RunEntryAction(int nextState, EventData eventData)
        {
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:PS(ProcessSpec_ID={target.Attr_ProcessSpec_ID}):entering[current={CurrentState},event={eventData.EventNumber}");


            changedStates = new List<ChangedState>();

            switch (nextState)
            {
            case (int)States.Ready:
                ActionReady();
                break;
            case (int)States.Working:
                ActionWorking();
                break;
            case (int)States.WaitForNextPreparetion:
                ActionWaitForNextPreparetion();
                break;
            case (int)States.Done:
                ActionDone();
                break;
            }
            if (logger != null) logger.LogInfo($"@{DateTime.Now.ToString("yyyyMMddHHmmss.fff")}:PS(ProcessSpec_ID={target.Attr_ProcessSpec_ID}):entered[current={CurrentState},event={eventData.EventNumber}");


            instanceRepository.SyncChangedStates(changedStates);
        }
    }
}
